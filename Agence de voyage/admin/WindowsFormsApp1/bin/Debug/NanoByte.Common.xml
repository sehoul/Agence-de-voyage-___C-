<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NanoByte.Common</name>
    </assembly>
    <members>
        <member name="T:NanoByte.Common.AppMutex">
            <summary>
            Provides a cross-process object allowing easy dection of application instances (e.g., for use by installers and update tools).
            </summary>
            <remarks><see cref="T:System.Threading.Mutex"/> is intended for synchronizing access to shared resources while this class is intended to detect application instances.</remarks>
        </member>
        <member name="M:NanoByte.Common.AppMutex.Close">
            <summary>
            Closes all contained handles, allowing the mutex to be released.
            </summary>
        </member>
        <member name="M:NanoByte.Common.AppMutex.Create(System.String)">
            <summary>
            Creates or opens a mutex (local and global) to signal that an application is running.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><see langword="true"/> if an existing mutex was opened; <see langword="false"/> if a new one was created.</returns>
            <remarks>The mutex will automatically be released once the process terminates. You can check the return value to prevent multiple instances from running.</remarks>
        </member>
        <member name="M:NanoByte.Common.AppMutex.Create(System.String,NanoByte.Common.AppMutex@)">
            <summary>
            Creates or opens a mutex (local and global) to signal that an application is running.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <param name="mutex">A pointer to the mutex.</param>
            <returns><see langword="true"/> if an existing mutex was opened; <see langword="false"/> if a new one was created.</returns>
            <remarks>The mutex will automatically be released once the process terminates or you call <see cref="M:NanoByte.Common.AppMutex.Close"/> on <paramref name="mutex"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.AppMutex.Open(System.String)">
            <summary>
            Tries to open an existing mutex (local and global) signaling that an application is running.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><see langword="true"/> if an existing mutex was opened; <see langword="false"/> if none existed.</returns>
            <remarks>Opening a mutex creates an additional handle to it, keeping it alive until the process terminates.</remarks>
        </member>
        <member name="M:NanoByte.Common.AppMutex.Probe(System.String)">
            <summary>
            Checks whether a specific mutex exists (local or global) without opening a lasting handle.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><see langword="true"/> if an existing mutex was found; <see langword="false"/> if none existed.</returns>
        </member>
        <member name="T:NanoByte.Common.Cli.ArgumentUtils">
            <summary>
            Provides helper methods for for parsing command-line arguments.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.ArgumentUtils.GetFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Parses command-line arguments as file paths including wildcard support.
            </summary>
            <param name="args">The arguments to parse.</param>
            <param name="defaultPattern">The default pattern to use for finding files when a directory is specified.</param>
            <returns>Handles to all matching files that were found</returns>
            <exception cref="T:System.IO.FileNotFoundException">A file that was explicitly specified in <paramref name="args"/> (no wildcards) could not be found.</exception>
            <remarks><paramref name="args"/> are first interpreted as files, then as directories. Directories are searched using the <paramref name="defaultPattern"/>. * and ? characters are considered as wildcards.</remarks>
        </member>
        <member name="T:NanoByte.Common.Cli.BundledCliAppControl">
            <summary>
            Provides an interface to a bundled external command-line application controlled via arguments and stdin and monitored via stdout and stderr.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.BundledCliAppControl.GetBundledDirectory(System.String)">
            <summary>
            Returns the directory containing the bundled version of an application.
            </summary>
            <param name="name">The directory name to search for.</param>
            <remarks>
            If a sub-directory named like <paramref name="name"/> is found in the installation directory this is used.
            Otherwise we try to locate the directory within the "bundled" directory (parallel to "src").
            Finally try the working directory.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Cli.BundledCliAppControl.AppDirName">
            <summary>
            The name of the directory containing the bundled version of this application.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.BundledCliAppControl.GetStartInfo(System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Cli.CliAppControl">
            <summary>
            Provides an interface to an external command-line application controlled via arguments and stdin and monitored via stdout and stderr.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Cli.CliAppControl.AppBinary">
            <summary>
            The name of the application's binary (without a file extension).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.CliAppControl.StartInteractive(System.String[])">
            <summary>
            Runs the external application interactivley instead of processing its output.
            </summary>
            <param name="arguments">Command-line arguments to launch the application with.</param>
            <returns>The newly launched process; <see langword="null"/> if an existing process was reused.</returns>
            <exception cref="T:System.IO.IOException">The external application could not be launched.</exception>
        </member>
        <member name="M:NanoByte.Common.Cli.CliAppControl.Execute(System.String[])">
            <summary>
            Runs the external application, processes its output and waits until it has terminated.
            </summary>
            <param name="arguments">Command-line arguments to launch the application with.</param>
            <returns>The application's complete stdout output.</returns>
            <exception cref="T:System.IO.IOException">The external application could not be launched.</exception>
        </member>
        <member name="M:NanoByte.Common.Cli.CliAppControl.GetStartInfo(System.String[])">
            <summary>
            Creates the <see cref="T:System.Diagnostics.ProcessStartInfo"/> used by <see cref="M:NanoByte.Common.Cli.CliAppControl.Execute(System.String[])"/> to launch the external application and redirect its input/output.
            </summary>
            <param name="arguments">The arguments to pass to the process at startup.</param>
        </member>
        <member name="M:NanoByte.Common.Cli.CliAppControl.InitStdin(System.IO.StreamWriter)">
            <summary>
            A hook method for writing to the application's stdin right after startup.
            </summary>
            <param name="writer">The stream writer providing access to stdin.</param>
        </member>
        <member name="M:NanoByte.Common.Cli.CliAppControl.HandlePending(NanoByte.Common.Streams.StreamConsumer,System.IO.StreamWriter)">
            <summary>
            Reads all currently pending <paramref name="stderr"/> lines and sends responses to <paramref name="stdin"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.CliAppControl.HandleStderr(System.String)">
            <summary>
            A hook method for handling stderr messages from the CLI application.
            </summary>
            <param name="line">The line written to stderr.</param>
            <returns>The response to write to stdin; <see langword="null"/> for none.</returns>
        </member>
        <member name="T:NanoByte.Common.Cli.CliUtils">
            <summary>
            Provides helper methods for communication with the user via the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.CliUtils.ReadString(System.String)">
            <summary>
            Asks the user to input a string.
            </summary>
            <param name="prompt">The prompt to display to the user on <see cref="P:System.Console.Error"/>.</param>
            <returns>The string the user entered.</returns>
            <exception cref="T:System.IO.IOException">The <see cref="P:System.Console.In"/> stream has been closed.</exception>
        </member>
        <member name="M:NanoByte.Common.Cli.CliUtils.ReadPassword(System.String)">
            <summary>
            Asks the user to input a password without echoing it.
            </summary>
            <param name="prompt">The prompt to display to the user on <see cref="P:System.Console.Error"/>.</param>
            <returns>The password the user entered; <see cref="F:System.String.Empty"/> if none.</returns>
        </member>
        <member name="P:NanoByte.Common.Cli.CliUtils.StandardInputRedirected">
            <summary>
            Indicates whether the stdout stream has been redirected.
            </summary>
            <remarks>This only works on Windows systems. On other operating systems it always returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Cli.CliUtils.StandardOutputRedirected">
            <summary>
            Indicates whether the stdout stream has been redirected.
            </summary>
            <remarks>This only works on Windows systems. On other operating systems it always returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Cli.CliUtils.StandardErrorRedirected">
            <summary>
            Indicates whether the stdout stream has been redirected.
            </summary>
            <remarks>This only works on Windows systems. On other operating systems it always returns <see langword="false"/>.</remarks>
        </member>
        <member name="T:NanoByte.Common.Cli.ProgressBar">
            <summary>
            A progress bar rendered on the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Cli.ProgressBar.Maximum">
            <summary>
            The maximum valid value for <see cref="P:NanoByte.Common.Cli.ProgressBar.Value"/>; must be greater than 0. Determines the length of the progress bar in console characters.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Cli.ProgressBar.Value">
            <summary>
            The progress of the task as a value between 0 and <see cref="P:NanoByte.Common.Cli.ProgressBar.Maximum"/>; -1 when unknown.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.ProgressBar.Draw">
            <summary>
            Draws the progress-bar to <see cref="P:System.Console.Error"/>.
            </summary>
            <remarks>The current line is overwritten.</remarks>
            <exception cref="T:System.IO.IOException">The progress bar could not be drawn to the <see cref="T:System.Console"/> (e.g. if it isn't a TTY).</exception>
        </member>
        <member name="M:NanoByte.Common.Cli.ProgressBar.Done">
            <summary>
            Stops the progress bar by writing a line break to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.ProgressBar.System#IDisposable#Dispose">
            <summary>
            Stops the progress bar by writing a line break to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Cli.TaskProgressBar">
            <summary>
            A progress bar rendered on the <see cref="T:System.Console"/> that takes <see cref="T:NanoByte.Common.Tasks.TaskSnapshot"/> inputs.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Cli.TaskProgressBar.State">
            <summary>
            The current State of the task.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Cli.TaskProgressBar.Report(NanoByte.Common.Tasks.TaskSnapshot)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.ArrayExtensions">
            <summary>
            Provides extension methods for arrays.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayExtensions.Append``1(``0[],``0)">
            <summary>
            Appends an element to an array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayExtensions.Prepend``1(``0[],``0)">
            <summary>
            Prepends an element to an array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayExtensions.SequencedEquals``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two arrays contain the same elements in the same order.
            </summary>
            <param name="first">The first of the two collections to compare.</param>
            <param name="second">The first of the two collections to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayExtensions.GetAddedElements``1(``0[],``0[])">
            <summary>
            Assumes two sorted arrays. Determines which elements are present in <paramref name="newArray"/> but not in <paramref name="oldArray"/>.
            </summary>
            <param name="newArray">The new list of elements; can be <see langword="null"/> (will be treated as an empty array).</param>
            <param name="oldArray">The original list of elements; can be <see langword="null"/> (will be treated as an empty array).</param>
            <returns>An array of elements that were added.</returns>
            <remarks>Elements that are present in <paramref name="oldArray"/> but not in <paramref name="newArray"/> are ignored. Elements that are equal for <see cref="M:System.IComparable`1.CompareTo(`0)"/> but have been otherwise modified will be added.</remarks>
        </member>
        <member name="F:NanoByte.Common.Collections.ArrayExtensions.DefaultComparer`1.Instance">
            <summary>A singleton instance of the comparer.</summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayExtensions.GetAddedElements``1(``0[],``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Assumes two sorted arrays. Determines which elements are present in <paramref name="newArray"/> but not in <paramref name="oldArray"/>.
            </summary>
            <param name="newArray">The new list of elements; can be <see langword="null"/> (will be treated as an empty array).</param>
            <param name="oldArray">The original list of elements; can be <see langword="null"/> (will be treated as an empty array).</param>
            <param name="comparer">An object that compares to elements to determine which one is bigger.</param>
            <returns>An array of elements that were added.</returns>
            <remarks>Elements that are present in <paramref name="oldArray"/> but not in <paramref name="newArray"/> are ignored. Elements that are equal for <see cref="M:System.IComparable`1.CompareTo(`0)"/> but have been otherwise modified will be added.</remarks>
        </member>
        <member name="T:NanoByte.Common.Collections.ComparableTuple`1">
            <summary>
            Represents a tuple of comparable elements.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.ComparableTuple`1.Key">
            <summary>
            The first element of the tuple.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.ComparableTuple`1.Value">
            <summary>
            The second element of the tuple.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.#ctor(`0,`0)">
            <summary>
            Creates a new comparable tuple.
            </summary>
            <param name="key">The first element of the tuple.</param>
            <param name="value">The second element of the tuple.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.ToString">
            <summary>
            Returns the tuple in the form "Key = Value". Not safe for parsing!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.Equals(NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.op_Equality(NanoByte.Common.Collections.ComparableTuple{`0},NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.op_Inequality(NanoByte.Common.Collections.ComparableTuple{`0},NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.CompareTo(NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.op_LessThan(NanoByte.Common.Collections.ComparableTuple{`0},NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.op_GreaterThan(NanoByte.Common.Collections.ComparableTuple{`0},NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.op_LessThanOrEqual(NanoByte.Common.Collections.ComparableTuple{`0},NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ComparableTuple`1.op_GreaterThanOrEqual(NanoByte.Common.Collections.ComparableTuple{`0},NanoByte.Common.Collections.ComparableTuple{`0})">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.CultureComparer">
            <summary>
            This compares two <see cref="T:System.Globalization.CultureInfo"/>s by alphabetically comparing their string representations.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.CultureComparer.Instance">
            <summary>A singleton instance of the comparer.</summary>
        </member>
        <member name="M:NanoByte.Common.Collections.CultureComparer.Compare(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.DictionaryExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.Dictionary`2"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.AddRange``4(System.Collections.Generic.IDictionary{``2,``3},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds multiple pairs to the dictionary in one go.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.EnumerableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of elements to remove any that match the <paramref name="predicate"/>.
            The opposite of <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Filters a sequence of elements to remove any that are equal to <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a list of lists.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends an element to a list.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends an element to a list.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of elements to remove any <see langword="null"/> values.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines the element in a list that maximizes a specified expression.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/>.</typeparam>
            <param name="enumeration">The elements to check.</param>
            <param name="expression">The expression to maximize.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
            <returns>The element that maximizes the expression; the default value of <typeparamref name="T"/> if <paramref name="enumeration"/> contains no elements.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines the element in a list that minimizes a specified expression.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/>.</typeparam>
            <param name="enumeration">The elements to check.</param>
            <param name="expression">The expression to minimize.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
            <returns>The element that minimizes the expression; the default value of <typeparamref name="T"/> if <paramref name="enumeration"/> contains no elements.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Filters a sequence of elements to remove any duplicates based on the equality of a key extracted from the elements.
            </summary>
            <param name="enumeration">The sequence of elements to filter.</param>
            <param name="keySelector">A function mapping elements to their respective equality keys.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.TrySelect``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Maps elements like <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>, but with exception handling.
            </summary>
            <typeparam name="TSource">The type of the input elements.</typeparam>
            <typeparam name="TResult">The type of the output elements.</typeparam>
            <typeparam name="TException">The type of exceptions to ignore. Any other exceptions are passed through.</typeparam>
            <param name="source">The elements to map.</param>
            <param name="selector">The selector to execute for each <paramref name="source"/> element. When it throws <typeparamref name="TException"/> the element is skipped. Any other exceptions are passed through.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.CloneElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calls <see cref="M:System.ICloneable.Clone"/> for every element in a collection and returns the results as a new collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.LanguageSet">
            <summary>
            A set of languages that can be serialized as a simple space-separated list of ISO language codes.
            </summary>
            <remarks>Uses Unix-style language codes with an underscore (_) separator.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.#ctor">
            <summary>
            Creates a new empty language collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.#ctor(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Creates a new language collection pre-filled with a set of languages.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.#ctor(System.String)">
            <summary>
            Deserializes a space-separated list of languages codes.
            </summary>
            <param name="value">A space-separated list of languages codes (in the same format as used by the LANG environment variable).</param>
            <remarks>Unknown language codes in <paramref name="value"/> are replaced with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> rather than raising an <see cref="T:System.ArgumentException"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.Add(System.String)">
            <summary>
            Adds a language identified by a string to the collection.
            </summary>
            <param name="langCode">The string identifying the language to add.</param>
            <returns><see langword="true"/> if the language could be added, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="langCode"/> is not a valid language code.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.ContainsAny(System.Collections.Generic.ICollection{System.Globalization.CultureInfo},System.Boolean)">
            <summary>
            Determines whether this language set contains any of a set of target languages.
            </summary>
            <param name="targets">The language set to match against.</param>
            <param name="ignoreCountry"><see langword="true"/> to compare only the two-letter language name; <see langword="false"/> to also compare the country code.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.ToString">
            <summary>
            Serializes the list as a space-separated list of languages codes.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.CollectionExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/>s and <see cref="T:System.Collections.Generic.List`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.AddRange``2(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds multiple elements to the list.
            </summary>
            <remarks>This is a covariant wrapper for <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.AddIfNew``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an element to the collection if it does not already <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> the element.
            </summary>
            <returns><see langword="true"/> if the element was added to the collection; <see langword="true"/> if the collection already contained the element.</returns>
            <remarks>This makes it possible to use a <see cref="T:System.Collections.Generic.ICollection`1"/> with semantics similar to a <see cref="T:NanoByte.Common.Collections.HashSet`1"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.AddRange``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds multiple elements to the collection.
            </summary>
            <seealso cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.RemoveRange``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Removes multiple elements from the collection.
            </summary>
            <seealso cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items from a <paramref name="collection"/> that match a specific <paramref name="condition"/>.
            </summary>
            <returns><see langword="true"/> if any elements where removed.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.RemoveLast``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes the last n elements from the list.
            </summary>
            <param name="list">The list to remove the elements from.</param>
            <param name="number">The number of elements to remove.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.ContainsOrEmpty``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Determines whether the collection contains an element or is null.
            </summary>
            <param name="collection">The list to check.</param>
            <param name="element">The element to look for.</param>
            <remarks>Useful for lists that contain an OR-ed list of restrictions, where an empty list means no restrictions.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether one collection of elements contains any of the elements in another.
            </summary>
            <param name="first">The first of the two collections to compare.</param>
            <param name="second">The first of the two collections to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
            <returns><see langword="true"/> if <paramref name="first"/> contains any element from <paramref name="second"/>. <see langword="false"/> if <paramref name="first"/> or <paramref name="second"/> is empty.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.SequencedEquals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two collections contain the same elements in the same order.
            </summary>
            <param name="first">The first of the two collections to compare.</param>
            <param name="second">The first of the two collections to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.UnsequencedEquals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two collections contain the same elements disregarding the order they are in.
            </summary>
            <param name="first">The first of the two collections to compare.</param>
            <param name="second">The first of the two collections to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.GetSequencedHashCode``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Generates a hash code for the contents of the collection. Changing the elements' order will change the hash.
            </summary>
            <param name="collection">The collection to generate the hash for.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
            <seealso cref="M:NanoByte.Common.Collections.CollectionExtensions.SequencedEquals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.GetUnsequencedHashCode``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Generates a hash code for the contents of the collection. Changing the elements' order will not change the hash.
            </summary>
            <param name="collection">The collection to generate the hash for.</param>
            <param name="comparer">Controls how to compare elements; leave <see langword="null"/> for default comparer.</param>
            <seealso cref="M:NanoByte.Common.Collections.CollectionExtensions.UnsequencedEquals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="T:NanoByte.Common.Collections.LocalizableString">
            <summary>
            A string with an associated language that can be XML serialized to an element with an xml:lang tag.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.LocalizableString.DefaultLanguage">
            <summary>
            The default language: english with an invariant country.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.LocalizableString.Value">
            <summary>
            The actual string value to store.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.LocalizableString.Language">
            <summary>
            The language of the <see cref="P:NanoByte.Common.Collections.LocalizableString.Value"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.LocalizableString.LanguageString">
            <summary>Used for XML serialization.</summary>
            <seealso cref="P:NanoByte.Common.Collections.LocalizableString.Language"/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.Equals(NanoByte.Common.Collections.LocalizableString)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.op_Equality(NanoByte.Common.Collections.LocalizableString,NanoByte.Common.Collections.LocalizableString)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.op_Inequality(NanoByte.Common.Collections.LocalizableString,NanoByte.Common.Collections.LocalizableString)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.Clone">
            <summary>
            Creates a plain copy of this string.
            </summary>
            <returns>The cloned string.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.LocalizableStringCollection">
            <summary>
            A collection of <see cref="T:NanoByte.Common.Collections.LocalizableString"/>s with language-search methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Add(System.String,System.String)">
            <summary>
            Adds a new string with an associated language to the collection.
            </summary>
            <param name="language">The language of the <paramref name="value"/>.</param>
            <param name="value">The actual string value to store.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Add(System.String)">
            <summary>
            Adds a new <code>en</code> string to the collection.
            </summary>
            <param name="value">The actual string value to store.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.ContainsExactLanguage(System.Globalization.CultureInfo)">
            <summary>
            Checks if the collection contains an entry exactly matching the specified language.
            </summary>
            <param name="language">The exact language to look for.</param>
            <returns><see langword="true"/> if an element with the specified language exists in the collection; <see langword="false"/> otherwise.</returns>
            <seealso cref="M:NanoByte.Common.Collections.LocalizableStringCollection.GetExactLanguage(System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.GetExactLanguage(System.Globalization.CultureInfo)">
            <summary>
            Returns the first string in the collection exactly matching the specified language.
            </summary>
            <param name="language">The exact language to look for.</param>
            <returns>The string value found in the collection; <see langword="null"/> if none was found.</returns>
            <seealso cref="M:NanoByte.Common.Collections.LocalizableStringCollection.ContainsExactLanguage(System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.GetBestLanguage(System.Globalization.CultureInfo)">
            <summary>
            Returns the best-fitting string in the collection for the specified language.
            </summary>
            <param name="language">The language to look for.</param>
            <returns>The best-fitting string value found in the collection; <see langword="null"/> if the collection is empty.</returns>
            <remarks>
            Language preferences in decreasing order:<br/>
            1. exact match<br/>
            2. same language with neutral culture<br/>
            3. en<br/>
            4. en-US<br/>
            5. first entry in collection
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Set(System.Globalization.CultureInfo,System.String)">
            <summary>
            Adds a new string with an associated language to the collection. Preexisting entries with the same language are removed.
            </summary>
            <param name="language">The language of the <paramref name="value"/>.</param>
            <param name="value">The actual string value to store; <see langword="null"/> to remove existing entries.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/> (elements are cloned).
            </summary>
            <returns>The cloned <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/>.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.MonitoredCollection`1">
            <summary>
            A collection that can easily be monitored for changes via events.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Changed">
            <summary>
            Occurs whenever something in the collection changes.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Added">
            <summary>
            Occurs when a new item has just been added to the collection.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Removing">
            <summary>
            Occurs when an item is just about to be removed from the collection.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Removed">
            <summary>
            Occurs when an item has just been removed from the collection.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.MonitoredCollection`1._dontRaiseEvents">
            <summary>Do not raise the <see cref="E:NanoByte.Common.Collections.MonitoredCollection`1.Added"/> and <see cref="E:NanoByte.Common.Collections.MonitoredCollection`1.Removed"/> events while <see langword="true"/>.
            <see cref="E:NanoByte.Common.Collections.MonitoredCollection`1.Removing"/> cannot be blocked!</summary>
        </member>
        <member name="P:NanoByte.Common.Collections.MonitoredCollection`1.MaxElements">
            <summary>
            The maximum number of elements; 0 for no limit.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.#ctor">
            <summary>
            Creates a new monitored collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.#ctor(System.Int32)">
            <summary>
            Creates a new monitored collection with an upper limit to the number of elements.
            </summary>
            <param name="maxElements">The maximum number of elements; 0 for no limit.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the collection that weren't already there.
            </summary>
            <param name="collection">A collection of items to add to the collection.</param>
            <remarks>
              <para>All events are raised en bloc after the items have been added.</para>
              <para>After calling this method this collection will contain a superset of the items in <paramref name="collection"/>, but not necessarily in the same order.</para>
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.SetMany(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the collection that weren't already there and
            removes all items in the collection that are not in <paramref name="collection"/>.
            </summary>
            <param name="collection">A collection of items to add to the collection.</param>
            <remarks>
              <para>All events are raised en bloc after the items have been added.</para>
              <para>After calling this method this collection will contain the same items as <paramref name="collection"/>, but not necessarily in the same order.</para>
            </remarks>
        </member>
        <member name="T:NanoByte.Common.Collections.MultiDictionary`2">
            <summary>
            A dictionary that allows a key to reference multiple values.
            </summary>
            <typeparam name="TKey">The type to use as a key to identify entries in the dictionary.</typeparam>
            <typeparam name="TValue">The type to use as elements to store in the dictionary.</typeparam>
            <remarks>This structure internally uses hash maps, so most operations run in O(1).</remarks>
        </member>
        <member name="P:NanoByte.Common.Collections.MultiDictionary`2.Keys">
            <summary>
            A collection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.MultiDictionary`2.Values">
            <summary>
            A collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.RemoveKey(`0)">
            <summary>
            Removes all elements with the specified key from the dictionary.
            </summary>
            <returns><see langword="true"/> if any elements were successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if <paramref name="key"/> was not found in the dictionary.</returns>
            <param name="key">The key of the element to remove.</param>
            <remarks>Since the <see cref="P:NanoByte.Common.Collections.MultiDictionary`2.Values"/> list needs to be rebuild by traversing all <see cref="P:NanoByte.Common.Collections.MultiDictionary`2.Keys"/>, this operation is not O(1) efficient.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.RemoveValue(`1)">
            <summary>
            Removes an element with a specific value from the dictionary.
            </summary>
            <returns><see langword="true"/> if the element was successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if <paramref name="value"/> was not found in the dictionary.</returns>
            <param name="value">The value of the element to remove.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <returns><see langword="true"/> if the dictionary contains an element with the key; otherwise, <see langword="false"/>.</returns>
            <param name="key">The key to locate in the dictionary.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains an element with the specified value.
            </summary>
            <returns><see langword="true"/> if the dictionary contains an element with the value; otherwise, <see langword="false"/>.</returns>
            <param name="value">The value to locate in the dictionary.</param>
        </member>
        <member name="P:NanoByte.Common.Collections.MultiDictionary`2.Item(`0)">
            <summary>
            Gets a collection containing the values with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>A list of elements with the specified key. Empty list if the key was not found.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.NamedCollection`1">
            <summary>
            A keyed collection (pseudo-dictionary) of <see cref="T:NanoByte.Common.INamed`1"/> objects. Case-insensitive!
            </summary>
            <remarks>Elements are automatically maintained in an alphabetically sorted order. Suitable for XML serialization.</remarks>
        </member>
        <member name="E:NanoByte.Common.Collections.NamedCollection`1.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.#ctor">
            <summary>
            Creates a new named collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new named collection pre-filled with elements.
            </summary>
            <param name="elements">The elements to pre-fill the collection with. Must all have unique <see cref="P:NanoByte.Common.INamed`1.Name"/>s!</param>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.Rename(`0,System.String)">
            <summary>
            Renames an element in the list. Renaming an element in the list directly (without using this method) will prevent lookups from working properly!
            </summary>
            <param name="element">The element to rename.</param>
            <param name="newName">The new <see cref="P:NanoByte.Common.INamed`1.Name"/> for the element.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The <paramref name="element"/> is not in the collection.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="newName"/> is already taken by another element in the collection.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.Sort">
            <summary>
            Sorts all elements alphabetically by their <see cref="P:NanoByte.Common.INamed`1.Name"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.GetKeyForItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.Clone">
            <summary>
            Creates a shallow copy of this collection (elements are not cloned).
            </summary>
            <returns>The cloned collection.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.TransparentCache`2">
            <summary>
            Transparently caches retrieval requests, passed through to a callback on first request.
            </summary>
            <remarks>This class is thread-safe.</remarks>
            <typeparam name="TKey">The type of keys used to request values.</typeparam>
            <typeparam name="TValue">The type of values returned.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new transparent cache.
            </summary>
            <param name="retriever">The callback used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCache`2.Retrieve(`0)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.TransparentCacheBase`2">
            <summary>
            Transparently caches retrieval requests, passed through to a template method on first request.
            </summary>
            <remarks>This class is thread-safe.</remarks>
            <typeparam name="TKey">The type of keys used to request values.</typeparam>
            <typeparam name="TValue">The type of values returned.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Collections.TransparentCacheBase`2.Item(`0)">
            <summary>
            Retrieves a value from the cache.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCacheBase`2.Retrieve(`0)">
            <summary>
            The template method used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCacheBase`2.Remove(`0)">
            <summary>
            Removes the the entry with the specified <paramref name="key"/> from the cache.
            </summary>
            <returns><see langword="true"/> if a matching entry was found and removed; <see langword="false"/> if no matching entry was in the cache.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCacheBase`2.Clear">
            <summary>
            Removes all entries from the cache.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.XmlDictionary">
            <summary>
            A string dictionary that supports data-binding and can be XML serialized.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Add(System.String,System.String)">
            <summary>
            Adds a new value and links it to a key
            </summary>
            <param name="key">The key object</param>
            <param name="value">The value</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> already exists in the dictionary.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.InsertItem(System.Int32,NanoByte.Common.Collections.XmlDictionaryEntry)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Remove(System.String)">
            <summary>
            Removes all values assigned to this key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns><see langword="true"/> if one or more elements were removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.ContainsKey(System.String)">
            <summary>
            Checks whether this collection contains a certain key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns><see langword="true"/> if the key was found.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.ContainsValue(System.String)">
            <summary>
            Checks whether this collection contains a certain value.
            </summary>
            <param name="value">The value to look for.</param>
            <returns><see langword="true"/> if the value was found.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Sort">
            <summary>
            Sorts all entries alphabetically by their key.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.GetValue(System.String)">
            <summary>
            Returns the value associated to a specific key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The value associated to <paramref name="key"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> was not found in the collection.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.ToDictionary">
            <summary>
            Convert this <see cref="T:NanoByte.Common.Collections.XmlDictionary"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/> for better lookup-performance.
            </summary>
            <returns>A dictionary containing the same data as this collection.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:NanoByte.Common.Collections.XmlDictionary"/> (elements are cloned).
            </summary>
            <returns>The cloned <see cref="T:NanoByte.Common.Collections.XmlDictionary"/>.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.XmlDictionaryEntry">
            <summary>
            A key-value string pair for <see ref="XmlCollection" />.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.XmlDictionaryEntry.Parent">
            <summary>
            The collection that owns this entry - set to enable automatic duplicate detection!
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.XmlDictionaryEntry.Key">
            <summary>
            The unique text key. Warning: If this is changed the <see cref="T:NanoByte.Common.Collections.XmlDictionary"/> must be rebuilt in order to update its internal hash table.
            </summary>
            <exception cref="T:System.InvalidOperationException">The new key value already exists in the <see cref="F:NanoByte.Common.Collections.XmlDictionaryEntry.Parent"/> dictionary.</exception>
        </member>
        <member name="P:NanoByte.Common.Collections.XmlDictionaryEntry.Value">
            <summary>
            The text value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.#ctor">
            <summary>
            Base-constructor for XML serialization. Do not call manually!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.#ctor(System.String,System.String)">
            <summary>
            Creates a new entry for <see ref="XmlCollection" />.
            </summary>
            <param name="key">The unique text key.</param>
            <param name="value">The text value.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.Equals(NanoByte.Common.Collections.XmlDictionaryEntry)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.op_Equality(NanoByte.Common.Collections.XmlDictionaryEntry,NanoByte.Common.Collections.XmlDictionaryEntry)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.op_Inequality(NanoByte.Common.Collections.XmlDictionaryEntry,NanoByte.Common.Collections.XmlDictionaryEntry)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.Clone">
            <summary>
            Creates a plain copy of this entry.
            </summary>
            <returns>The cloned entry.</returns>
        </member>
        <member name="T:NanoByte.Common.Dispatch.AggregateDispatcher`1">
            <summary>
            Calls different action delegates based on the runtime types of objects.
            Calls multiple delegates when they all match a type (through inheritance).
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Add``1(System.Action{``0})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Matches all subtypes as well.</typeparam>
            <param name="action">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Dispatch(`0)">
            <summary>
            Dispatches an element to all delegates matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.AggregateDispatcher`2">
            <summary>
            Calls different function delegates (with enumerable return values) based on the runtime types of objects.
            Aggregates results when multiple delegates match a type (through inheritance).
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
            <typeparam name="TResult">The enumerable return values of the delegates.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Add``1(System.Func{``0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Matches all subtypes as well.</typeparam>
            <param name="function">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Dispatch(`0)">
            <summary>
            Dispatches an element to all delegates matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Add``1(System.Func{``0,System.Collections.Generic.IEnumerable{`1}})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
            <returns>The values returned by all matching delegates aggregated.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Add``1(System.Func{``0,System.Collections.Generic.IEnumerable{`1}})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
            <returns>The values returned by the matching delegates.</returns>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Bucketizer`1">
            <summary>
            Splits collections into multiple buckets based on predicate matching. The first matching predicate wins. Create with <see cref="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <typeparam name="T">The common base type of all objects to be bucketized.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new predicate-matching bucketizer.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`1.Add(System.Predicate{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a new bucket rule.
            </summary>
            <param name="predicate">A condition to check elements against.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="predicate"/>.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`1.Run">
            <summary>
            Adds each element to the first bucket with a matching predicate (if any). Set up with <see cref="M:NanoByte.Common.Dispatch.Bucketizer`1.Add(System.Predicate{`0},System.Collections.Generic.ICollection{`0})"/> first.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Bucketizer">
            <summary>
            Contains extension methods for creating bucketizers.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new predicate-matching bucketizer.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a new value-mapping bucketizer.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <param name="valueRetriever">A function to map elements to their according values used for bucketization.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Bucketizer`2">
            <summary>
            Splits collections into multiple buckets based on value-mapping. Create with <see cref="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
            <typeparam name="TElement">The common base type of all objects to be bucketized.</typeparam>
            <typeparam name="TValue">The type of the values to be matched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`1})">
            <summary>
            Creates a new value-mapping bucketizer.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <param name="valueRetriever">A function to map elements to their according values used for bucketization.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`2.Add(`1,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a new bucket rule.
            </summary>
            <param name="value">A value to compare with the result of the value retriever using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="value"/>.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`2.Run">
            <summary>
            Adds each element to the first bucket with a matching value (if any). Set up with <see cref="M:NanoByte.Common.Dispatch.Bucketizer`2.Add(`1,System.Collections.Generic.ICollection{`0})"/> first.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.BucketRule`1">
            <summary>
            A rule for <see cref="T:NanoByte.Common.Dispatch.Bucketizer`1"/>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`1.Predicate">
            <summary>
            A condition to check elements against.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`1.Bucket">
            <summary>
            The collection elements are added to if they match the <see cref="F:NanoByte.Common.Dispatch.BucketRule`1.Predicate"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.BucketRule`1.#ctor(System.Predicate{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new bucket rule.
            </summary>
            <param name="predicate">A condition to check elements against.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="predicate"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.BucketRule`2">
            <summary>
            A rule for <see cref="T:NanoByte.Common.Dispatch.Bucketizer`2"/>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`2.Value">
            <summary>
            A value to check elements against.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`2.Bucket">
            <summary>
            The collection elements are added to if they match the <see cref="F:NanoByte.Common.Dispatch.BucketRule`2.Value"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.BucketRule`2.#ctor(`1,System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new bucket rule.
            </summary>
            <param name="value">A value to compare with the result of the value retriever using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="value"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.IMergeable`1">
            <summary>
            An equatable element that can be merged using 3-way merging.
            </summary>
            <typeparam name="T">The type the interface is being applied to.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Dispatch.IMergeable`1.MergeID">
            <summary>
            A unique identifier used when comparing for merging. Should always remain the same, even when the element is modified.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Dispatch.IMergeable`1.Timestamp">
            <summary>
            The time this element was last modified. This is used to determine preceedence with sync conflicts.
            </summary>
            <remarks>This value is ignored by clone and equality methods.</remarks>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Merge">
            <summary>
            Provides utility methods for merging <see cref="T:System.Collections.Generic.ICollection`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.TwoWay``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Performs a 2-way merge on two collections. Changes required to <paramref name="theirs"/> to reflect <paramref name="mine"/> are emitted using callback delegates.
            </summary>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">Called for every element that should be added to <paramref name="mine"/>.</param>
            <param name="removed">Called for every element that should be removed from <paramref name="mine"/>.</param>
            <remarks><paramref name="theirs"/> and <paramref name="mine"/> should use an internal hashmap for <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for better performance.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.TwoWay``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``1},System.Collections.Generic.ICollection{``2})">
            <summary>
            Performs a 2-way merge on two collections. Changes required to <paramref name="theirs"/> to reflect <paramref name="mine"/> are recorded using differential lists.
            </summary>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">All elements that should be added to <paramref name="mine"/> are added to this list.</param>
            <param name="removed">All elements that should be removed from <paramref name="mine"/> are added to this list.</param>
            <remarks><paramref name="theirs"/> and <paramref name="mine"/> should use an internal hashmap for <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for better performance.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.ThreeWay``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Performs a 3-way merge on a set of collections. Changes between <paramref name="reference"/> and <paramref name="theirs"/> as they apply to <paramref name="mine"/> are emitted using callback delegates.
            </summary>
            <param name="reference">A common baseline from which both <paramref name="theirs"/> and <paramref name="mine"/> were modified.</param>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">Called for every element that should be added to <paramref name="mine"/>.</param>
            <param name="removed">Called for every element that should be removed from <paramref name="mine"/>.</param>
            <remarks>Modified elements are handled by calling <paramref name="removed"/> for the old state and <paramref name="added"/> for the new state.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.ThreeWay``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``1},System.Collections.Generic.ICollection{``2})">
            <summary>
            Performs a 3-way merge on a set of collections. Changes between <paramref name="reference"/> and <paramref name="theirs"/> as they apply to <paramref name="mine"/> are recorded using differential lists.
            </summary>
            <param name="reference">A common baseline from which both <paramref name="theirs"/> and <paramref name="mine"/> were modified.</param>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">All elements that should be added to <paramref name="mine"/> are added to this list.</param>
            <param name="removed">All elements that should be removed from <paramref name="mine"/> are added to this list.</param>
            <remarks>Modified elements are handled by adding to <paramref name="removed"/> for the old state and to <paramref name="added"/> for the new state.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.FindMergeID``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Finds the first element in a list matching the specified <see cref="P:NanoByte.Common.Dispatch.IMergeable`1.MergeID"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.ModelViewSync`2">
            <summary>
            Keeps two collections of different types in sync based on mapping rules.
            </summary>
            <typeparam name="TModel">The common base type of elements in the model.</typeparam>
            <typeparam name="TView">The common base type of representations in the view.</typeparam>
            <remarks>
            Useful for maintining View representations for a set of mutable Model elements in a Model-View-Controller/Presenter design.
            Generated View representations will automatically be disposed on removal, if they implement <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.#ctor(NanoByte.Common.Collections.MonitoredCollection{`0},System.Collections.Generic.ICollection{`1})">
            <summary>
            Creates a new Model-View synchronizer.
            </summary>
            <param name="model">The Model that can change on its own accord.</param>
            <param name="view">The View that is to be automatically updated to reflect changes in the Model.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.Initialize">
            <summary>
            Must be called once, after all relevant mapping rules have been registered.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Dispatch.ModelViewSync`2.Representations">
            <summary>
            All View representations created by the synchronizer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.Lookup(`1)">
            <summary>
            Looks up the Model element a View representation was created for.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no match.</exception>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.RegisterMultiple``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``0,``1})">
            <summary>
            Registers a mapping rule for a specific type of Model element.
            </summary>
            <param name="create">Callback that creates a set of 0..n View representations for a given Model element.</param>
            <param name="update">Callback that updates a specific View representation based on the state of a given Model element; can be <see langword="null"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.Register``2(System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            Registers a mapping rule for a specific type of Model element.
            </summary>
            <param name="create">Callback that creates a View representation for a given Model element.</param>
            <param name="update">Callback that updates a View representation based on the state of a given Model element; can be <see langword="null"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.PerTypeDispatcher`1">
            <summary>
            Calls different action delegates based on the runtime types of objects.
            Types must be exact matches. Inheritance is not considered.
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
        </member>
        <member name="F:NanoByte.Common.Dispatch.PerTypeDispatcher`1._ignoreMissing">
            <summary><see langword="true"/> to silently ignore dispatch attempts on unknown types; <see langword="false"/> to throw exceptions.</summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.#ctor(System.Boolean)">
            <summary>
            Creates a new dispatcher.
            </summary>
            <param name="ignoreMissing"><see langword="true"/> to silently ignore dispatch attempts on unknown types; <see langword="false"/> to throw exceptions.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Does not match subtypes</typeparam>
            <param name="action">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Dispatch(`0)">
            <summary>
            Dispatches an element to the delegate matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching the <paramref name="element"/> type was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/>ed and <see cref="F:NanoByte.Common.Dispatch.PerTypeDispatcher`1._ignoreMissing"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching one of the element types was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/>ed and <see cref="F:NanoByte.Common.Dispatch.PerTypeDispatcher`1._ignoreMissing"/> is <see langword="false"/>.</exception>
        </member>
        <member name="T:NanoByte.Common.Dispatch.PerTypeDispatcher`2">
            <summary>
            Calls different function delegates (with return values) based on the runtime types of objects.
            Types must be exact matches. Inheritance is not considered.
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
            <typeparam name="TResult">The return value of the delegates.</typeparam>
        </member>
        <member name="F:NanoByte.Common.Dispatch.PerTypeDispatcher`2._ignoreMissing">
            <summary><see langword="true"/> to silently ignore dispatch attempts on unknown types; <see langword="false"/> to throw exceptions.</summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.#ctor(System.Boolean)">
            <summary>
            Creates a new dispatcher.
            </summary>
            <param name="ignoreMissing"><see langword="true"/> to return the default value (usually <see langword="null"/>) for dispatch attempts on unknown types; <see langword="false"/> to throw exceptions.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Does not match subtypes.</typeparam>
            <param name="function">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Dispatch(`0)">
            <summary>
            Dispatches an element to the delegate matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
            <returns>The value returned by the matching delegate.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching the <paramref name="element"/> type was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/>ed and <see cref="F:NanoByte.Common.Dispatch.PerTypeDispatcher`2._ignoreMissing"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
            <returns>The values returned by the matching delegates.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching one of the element types was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/>ed and <see cref="F:NanoByte.Common.Dispatch.PerTypeDispatcher`2._ignoreMissing"/> is <see langword="false"/>.</exception>
        </member>
        <member name="T:NanoByte.Common.RetryAction">
            <summary>
            Delegate used by <seealso cref="M:NanoByte.Common.ExceptionUtils.Retry``1(NanoByte.Common.RetryAction,System.Int32)"/>.
            </summary>
            <param name="lastAttempt">Indicates whether this retry run is the last attempt before giving up and passing the exception through.</param>
            <seealso cref="M:NanoByte.Common.ExceptionUtils.Retry``1(NanoByte.Common.RetryAction,System.Int32)"/>
        </member>
        <member name="T:NanoByte.Common.ExceptionUtils">
            <summary>
            Provides helper methods related to <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.Rethrow(System.Exception)">
            <summary>
            Throws a previously thrown exception again, preserving the existing stack trace if possible.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.ApplyWithRollback``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Applies an operation for all elements of a collection. Automatically applies rollback operations in case of an exception.
            </summary>
            <typeparam name="T">The type of elements to operate on.</typeparam>
            <param name="elements">The elements to apply the action for.</param>
            <param name="apply">The action to apply to each element.</param>
            <param name="rollback">The action to apply to each element that <paramref name="apply"/> was called on in case of an exception.</param>
            <remarks>
            <paramref name="rollback"/> is applied to the element that raised an exception in <paramref name="apply"/> and then interating backwards through all previous elements.
            After rollback is complete the exception is passed on.
            </remarks>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.TryAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an operation for the first possible element of a collection.
            If the operation succeeds the remaining elements are ignored. If the operation fails it is repeated for the next element.
            </summary>
            <typeparam name="T">The type of elements to operate on.</typeparam>
            <param name="elements">The elements to apply the action for.</param>
            <param name="action">The action to apply to an element.</param>
            <exception cref="T:System.Exception">The exception thrown by <paramref name="action"/> for the last element of <paramref name="elements"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.Retry``1(NanoByte.Common.RetryAction,System.Int32)">
            <summary>
            Executes a delegate and automatically retries it using exponential backoff if a specifc type of exception was raised.
            </summary>
            <typeparam name="TException">The type of exception to triger a retry.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
        </member>
        <member name="T:NanoByte.Common.Future`1">
            <summary>
            Combines an <see cref="T:System.Threading.EventWaitHandle"/> with a result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Future`1.Set(`0)">
            <summary>
            Sets the result and signals anyone waiting for it.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Future`1.Get">
            <summary>
            Waits for the result and returns it when it is ready.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Future`1.op_Implicit(`0)~NanoByte.Common.Future{`0}">
            <summary>
            Creates a future with the result already set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Future`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.IChangeNotify`1">
            <summary>
            An object that can notify interested parties of changes in properties of interest.
            </summary>
            <typeparam name="TSender">The type of the class implementing this interface.</typeparam>
        </member>
        <member name="E:NanoByte.Common.IChangeNotify`1.Changed">
            <summary>
            Occurs when a property of interest has changed.
            </summary>
        </member>
        <member name="E:NanoByte.Common.IChangeNotify`1.ChangedRebuild">
            <summary>
            Occurs when a property changed that requires visual representations to rebuilt from scratch.
            </summary>
        </member>
        <member name="T:NanoByte.Common.INamed`1">
            <summary>
            An object that has a unique human-readable name that can be used for identification in lists and sorting and that can be modified.
            </summary>
            <see cref="T:NanoByte.Common.Collections.NamedCollection`1"/>
        </member>
        <member name="P:NanoByte.Common.INamed`1.Name">
            <summary>
            A unique human-readable name for the object.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Info.AppInfo">
            <summary>
            Wraps information about an application in a serializer-friendly format.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Name">
            <summary>
            The name of the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.ProductName">
            <summary>
            The name of the product the application is a part of.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.AppInfo.Version">
            <summary>
            The version number of the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.VersionString">
            <summary>Used for XML serialization.</summary>
            <seealso cref="F:NanoByte.Common.Info.AppInfo.Version"/>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.NameVersion">
            <summary>
            The <see cref="P:NanoByte.Common.Info.AppInfo.Name"/> and <see cref="F:NanoByte.Common.Info.AppInfo.Version"/> combined.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Copyright">
            <summary>
            The copyright information for the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Description">
            <summary>
            A description of the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Arguments">
            <summary>
            The command-line arguments the application was started with.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Current">
            <summary>
            Information about the currently running application.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Info.AppInfo.Load">
            <summary>
            Loads application information for the currently running application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NanoByte.Common.Info.AppInfo.Load(System.Reflection.Assembly)">
            <summary>
            Loads application information for a specific <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Info.ExceptionInfo">
            <summary>
            Wraps information about an exception in a serializer-friendly format.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.ExceptionType">
            <summary>
            The type of exception.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.Message">
            <summary>
            The message describing the exception.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.Source">
            <summary>
            The name of the application or the object that causes the error.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.StackTrace">
            <summary>
            A string representation of the frames on the call stack at the time the exception was thrown.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.InnerException">
            <summary>
            Information about the exception that originally caused the exception being described here.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Info.ExceptionInfo.#ctor">
            <summary>
            Base-constructor for XML serialization. Do not call manually!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Info.ExceptionInfo.#ctor(System.Exception)">
            <summary>
            Creates an exception information based on an exception.
            </summary>
            <param name="ex">The exception whose information to extract.</param>
        </member>
        <member name="T:NanoByte.Common.Info.OSInfo">
            <summary>
            Wraps information about an operating system in a serializer-friendly format.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.Platform">
            <summary>
            The operating system platform (e.g. Windows NT).
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.Is64Bit">
            <summary>
            True if the operating system is a 64-bit version of Windows.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.Version">
            <summary>
            The version of the operating system (e.g. 6.0 for Vista).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.OSInfo.VersionString">
            <summary>Used for XML serialization.</summary>
            <seealso cref="F:NanoByte.Common.Info.OSInfo.Version"/>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.ServicePack">
            <summary>
            The service pack level (e.g. "Service Pack 1").
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.FrameworkVersion">
            <summary>
            The version of the operating system (e.g. 6.0 for Vista).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.OSInfo.FrameworkVersionString">
            <summary>Used for XML serialization.</summary>
            <seealso cref="F:NanoByte.Common.Info.OSInfo.Version"/>
        </member>
        <member name="P:NanoByte.Common.Info.OSInfo.Current">
            <summary>
            Information about the current operating system.
            </summary>
        </member>
        <member name="T:NanoByte.Common.LogEntryEventHandler">
            <summary>
            Describes an event relating to an entry in the <see cref="T:NanoByte.Common.Log"/>.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message text of the entry.</param>
            <seealso cref="E:NanoByte.Common.Log.Handler"/>
        </member>
        <member name="T:NanoByte.Common.Log">
            <summary>
            Sends log messages to custom handlers or the <see cref="T:System.Console"/>.
            Additionally writes to <see cref="T:System.Diagnostics.Debug"/>, an in-memory buffer and a plain text file.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Log.Handler">
            <summary>
            Invoked when a new entry is added to the log.
            Only the newest (last) registered handler is invoked.
            <see cref="T:System.Console"/> output is used as a fallback if no handlers are registered.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Log.Content">
            <summary>
            Collects all log entries from this application session.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Debug(System.String)">
            <summary>
            Writes information to help developers diagnose problems to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Debug(System.Exception)">
            <summary>
            Writes an exception as an <see cref="M:NanoByte.Common.Log.Debug(System.String)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Info(System.String)">
            <summary>
            Writes nice-to-know information to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Info(System.Exception)">
            <summary>
            Writes an exception's message as a <see cref="M:NanoByte.Common.Log.Info(System.String)"/>. Recursivley handles <see cref="P:System.Exception.InnerException"/>s.
            </summary>
            <remarks>Also sends the entire exception to <see cref="M:NanoByte.Common.Log.Debug(System.Exception)"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Log.Warn(System.String)">
            <summary>
            Writes a warning that doesn't have to be acted upon immediately to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Warn(System.Exception)">
            <summary>
            Writes an exception's message as a <see cref="M:NanoByte.Common.Log.Warn(System.String)"/>. Recursivley handles <see cref="P:System.Exception.InnerException"/>s.
            </summary>
            <remarks>Also sends the entire exception to <see cref="M:NanoByte.Common.Log.Debug(System.Exception)"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Log.Error(System.String)">
            <summary>
            Writes a critical error that should be attended to to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Error(System.Exception)">
            <summary>
            Writes an exception's message as an <see cref="M:NanoByte.Common.Log.Error(System.String)"/>. Recursivley handles <see cref="P:System.Exception.InnerException"/>s.
            </summary>
            <remarks>Also sends the entire exception to <see cref="M:NanoByte.Common.Log.Debug(System.Exception)"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Log.PrintToConsole(NanoByte.Common.LogSeverity,System.String)">
            <summary>
            Prints a log entry to the <see cref="T:System.Console"/>.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message text of the entry.</param>
        </member>
        <member name="T:NanoByte.Common.LogSeverity">
            <summary>
            Describes how severe/important a <see cref="T:NanoByte.Common.Log"/> entry is.
            </summary>
            <seealso cref="T:NanoByte.Common.LogEntryEventHandler"/>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Debug">
            <summary>Information to help developers diagnose problems.</summary>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Info">
            <summary>A nice-to-know piece of information.</summary>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Warn">
            <summary>A warning that doesn't have to be acted upon immediately.</summary>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Error">
            <summary>A critical error that should be attended to.</summary>
        </member>
        <member name="T:NanoByte.Common.MarshalNoTimeout">
            <summary>
            Derive from this class to enable remoting without timeouts. Keeps remoting object alive as long as process is running.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MarshalNoTimeout.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.MsgSeverity">
            <summary>
            How severe/important a message is
            </summary>
        </member>
        <member name="F:NanoByte.Common.MsgSeverity.Info">
            <summary>A nice-to-know piece of information.</summary>
        </member>
        <member name="F:NanoByte.Common.MsgSeverity.Warn">
            <summary>A warning that doesn't have to be acted upon immediately.</summary>
        </member>
        <member name="F:NanoByte.Common.MsgSeverity.Error">
            <summary>A critical error that should be attended to.</summary>
        </member>
        <member name="T:NanoByte.Common.MutexLock">
            <summary>
            Provides a wrapper around <see cref="T:System.Threading.Mutex"/> that automatically acquires on creating and releases on <see cref="M:NanoByte.Common.MutexLock.Dispose"/>
            </summary>
            <example>
            Instead of <code>lock (_object) { code(); }</code> for per-process locking use
            <code>using (new MutexLock("name") { code(); }</code> for inter-process locking.
            </example>
        </member>
        <member name="M:NanoByte.Common.MutexLock.#ctor(System.String)">
            <summary>
            Acquires <see cref="T:System.Threading.Mutex"/> with <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MutexLock.Dispose">
            <summary>
            Releases the <see cref="T:System.Threading.Mutex"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.NamedComparer`1">
            <summary>
            Compares <see cref="T:NanoByte.Common.INamed`1"/> objects based on their <see cref="P:NanoByte.Common.INamed`1.Name"/> in a case-insensitive way.
            </summary>
        </member>
        <member name="F:NanoByte.Common.NamedComparer`1.Instance">
            <summary>A singleton instance of the comparer.</summary>
        </member>
        <member name="T:NanoByte.Common.Native.CompilerUtils">
            <summary>
            Provides helper methods for compiling .NET code at runtime.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.CompilerUtils.CompileCSharp(System.CodeDom.Compiler.CompilerParameters,System.String,System.String)">
            <summary>
            Compiles a string of C# code using the newest C# compiler available on the system.
            </summary>
            <param name="compilerParameters">The compiler configuration (e.g. output file path).</param>
            <param name="code">The C# code to compile.</param>
            <param name="manifest">The contents of the Win32 manifest to apply to the output file. Will only be applied if a C# 3.0 or newer compiler is available.</param>
        </member>
        <member name="M:NanoByte.Common.Native.CompilerUtils.GetCSharpCompiler(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Detects the best possible C# compiler version and instantiates it.
            </summary>
            <param name="compilerParameters">The compiler parameters to be used. Version-specific options may be set.</param>
            <param name="manifestFilePath">The path of an assembly file to be added to compiled binaries if possible.</param>
        </member>
        <member name="M:NanoByte.Common.Native.CompilerUtils.NewCSharpCodeProviderEx(System.String)">
            <summary>
            Instantiates a post-v2.0 C# compiler in a 2.0 .NET runtime environment.
            </summary>
            <param name="version">The full .NET version number including the leading "v". Use predefined constants when possible.</param>
            <remarks>Extracted to a separate method in case this is older than .NET 2.0 SP2 and the required constructor is therefore missing.</remarks>
        </member>
        <member name="T:NanoByte.Common.Native.CygwinUtils">
            <summary>
            Provides access to Cygwin-related filesystem features. Cygwin provides Unix-like functionality on Windows systems.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.CygwinUtils.SymlinkCookie">
            <summary>
            Byte sequence used to mark the start of a Cygwin symlink file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is a Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks).
            </summary>
            <param name="path">The path of the file to check.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is a Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks).
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.HasSystemAttribute(System.String)">
            <summary>
            Checks whether a file has the <see cref="F:System.IO.FileAttributes.System"/> attribute set.
            Always <see langword="true"/> on non-Windows systems since they do not expose this attribute, so we assume it might be set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a new Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks).
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.IO.IOException">There was an IO problem writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file was denied.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.UnixUtils">
            <summary>
            Provides helper methods for Unix-specific features of the Mono library.
            </summary>
            <remarks>
            This class has a dependency on <code>Mono.Posix</code>.
            Make sure to check <see cref="P:NanoByte.Common.Native.UnixUtils.IsUnix"/> before calling any other methods in this class to avoid missing assembly exceptions.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.IsUnix">
            <summary>
            <see langword="true"/> if the current operating system is a Unixoid system (e.g. Linux or MacOS X).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.IsMacOSX">
            <summary>
            <see langword="true"/> if the current operating system is MacOS X.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.HasGui">
            <summary>
            <see langword="true"/> if there is an X Server running or the current operating system is MacOS X.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.OSName">
            <summary>
            The operating system name as reported by the "uname" system call.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.CpuType">
            <summary>
            The CPU type as reported by the "uname" system call (after applying some normalization).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a new Unix symbolic link to a file or directory.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.CreateHardlink(System.String,System.String)">
            <summary>
            Creates a new Unix hard link between two files.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The absolute path of the existing file to point to.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.AreHardlinked(System.String,System.String)">
            <summary>
            Determines whether to files are hardlinked.
            </summary>
            <param name="path1">The path of the first file.</param>
            <param name="path2">The path of the second file.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.Rename(System.String,System.String)">
            <summary>
            Renames a file. Atomically replaces the destination if present.
            </summary>
            <param name="source">The path of the file to rename.</param>
            <param name="destination">The new path of the file. Must reside on the same file system as <paramref name="source"/>.</param>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsRegularFile(System.String)">
            <summary>
            Checks whether a file is a regular file (i.e. not a device file, symbolic link, etc.).
            </summary>
            <return><see lang="true"/> if <paramref name="path"/> points to a regular file; <see lang="false"/> otherwise.</return>
            <remarks>Will return <see langword="false"/> for non-existing files.</remarks>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is a Unix symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <remarks>Will return <see langword="false"/> for non-existing files.</remarks>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is a Unix symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="F:NanoByte.Common.Native.UnixUtils.AllWritePermission">
            <summary>A combination of bit flags to grant everyone writing permissions.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.MakeReadOnly(System.String)">
            <summary>
            Removes write permissions for everyone on a filesystem object (file or directory).
            </summary>
            <param name="path">The filesystem object (file or directory) to make read-only.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.MakeWritable(System.String)">
            <summary>
            Sets write permissions for the owner on a filesystem object (file or directory).
            </summary>
            <param name="path">The filesystem object (file or directory) to make writeable by the owner.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="F:NanoByte.Common.Native.UnixUtils.AllExecutePermission">
            <summary>A combination of bit flags to grant everyone executing permissions.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsExecutable(System.String)">
            <summary>
            Checks whether a file is marked as Unix-executable.
            </summary>
            <param name="path">The file to check for executable rights.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to an executable; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <remarks>Will return <see langword="false"/> for non-existing files.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.SetExecutable(System.String,System.Boolean)">
            <summary>
            Marks a file as Unix-executable or not Unix-executable.
            </summary>
            <param name="path">The file to mark as executable or not executable.</param>
            <param name="executable"><see lang="true"/> to mark the file as executable, <see lang="true"/> to mark it as not executable.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.GetXattr(System.String,System.String)">
            <summary>
            Gets an extended file attribute.
            </summary>
            <param name="path">The path of the file to read the attribute from.</param>
            <param name="name">The name of the attribute to read.</param>
            <returns>The contents of the attribute as a byte array; <see langword="null"/> if there was a problem reading the file.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.SetXattr(System.String,System.String,System.Byte[])">
            <summary>
            Sets an extended file attribute.
            </summary>
            <param name="path">The path of the file to set the attribute for.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="data">The data to write to the attribute.</param>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.GetFileSystem(System.String)">
            <summary>
            Determines the file system type a file or directory is stored on.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The name of the file system in fstab format (e.g. ext3 or ntfs-3g).</returns>
            <remarks>Only works on Linux, not on other Unixes (e.g. MacOS X).</remarks>
            <exception cref="T:System.IO.IOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsCredentials">
            <summary>
            Provides an interface to the Windows Credentials API. Supported on Windows XP or newer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsCredentials.IsCredentialStored(System.String)">
            <summary>
            Determines whether there are any credentials stored for a specific target.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Credentials API. Needs Windows XP or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsCredentials.PromptDialog(System.String,NanoByte.Common.Native.WindowsCredentialsFlags,System.String,System.String,System.IntPtr)">
            <summary>
            Prompts the user for credentials using a GUI dialog.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <param name="flags">Flags for configuring the prompt.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to display in the dialog.</param>
            <param name="owner">The parent window for the dialog; can be <see langword="null"/>.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Credentials API. Needs Windows XP or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsCredentials.PromptCli(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <summary>
            Prompts the user for credentials using a command-line interface.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <param name="flags">Flags for configuring the prompt.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Credentials API. Needs Windows XP or newer.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsMutex">
            <summary>
            Provides Windows-specific API calls for cross-process Mutexes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Create(System.String,System.IntPtr@)">
            <summary>
            Creates or opens a mutex.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <param name="handle">The handle created for the mutex. Can be used to close it before the process ends.</param>
            <returns><see langword="true"/> if an existing mutex was opened; <see langword="false"/> if a new one was created.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">The native subsystem reported a problem.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
            <remarks>The mutex will automatically be released once the process terminates.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Open(System.String)">
            <summary>
            Tries to open an existing mutex.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><see langword="true"/> if an existing mutex was opened; <see langword="false"/> if none existed.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">The native subsystem reported a problem.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
            <remarks>Opening a mutex creates an additional handle to it, keeping it alive until the process terminates.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Probe(System.String)">
            <summary>
            Checks whether a specific mutex exists without openining a lasting handle.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><see langword="true"/> if an existing mutex was found; <see langword="false"/> if none existed.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">The native subsystem reported a problem.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Close(System.IntPtr)">
            <summary>
            Closes an existing mutex handle. The mutex is destroyed if this is the last handle.
            </summary>
            <param name="handle">The mutex handle to be closed.</param>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsRestartManager">
            <summary>
            Provides an interface to the Windows Restart Manager. Supported on Windows Vista or newer.
            </summary>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/windows/desktop/cc948910
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.BuildException(System.Int32)">
            <summary>
            Builds a suitable <see cref="T:System.Exception"/> for a given <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.#ctor">
            <summary>
            Starts a new Restart Manager session.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Restart Manager. Needs Windows Vista or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.Dispose">
            <summary>
            Ends the Restart Manager session.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.RegisterResources(System.String[])">
            <summary>
            Registers resources to the Restart Manager session. The Restart Manager uses the list of resources registered with the session to determine which applications and services must be shut down and restarted.
            </summary>
            <param name="files">An array of full filename paths.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.ListApps(NanoByte.Common.Tasks.ITaskHandler)">
            <summary>
            Gets a list of all applications that are currently using resources that have been registered with <see cref="M:NanoByte.Common.Native.WindowsRestartManager.RegisterResources(System.String[])"/>.
            </summary>
            <exception cref="T:System.IO.IOException">The Restart Manager could not access the registry.</exception>
            <exception cref="T:System.TimeoutException">The Restart Manager could not obtain a Registry write mutex in the allotted time. A system restart is recommended.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.ListAppProblems(System.Boolean@)">
            <summary>
            Gets a list of all applications that have caused problems with <see cref="M:NanoByte.Common.Native.WindowsRestartManager.ShutdownApps(NanoByte.Common.Tasks.ITaskHandler)"/> or <see cref="M:NanoByte.Common.Native.WindowsRestartManager.RestartApps(NanoByte.Common.Tasks.ITaskHandler)"/>.
            </summary>
            <param name="permissionDenied">Indicates whether trying again as administrator may help.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.ShutdownApps(NanoByte.Common.Tasks.ITaskHandler)">
            <summary>
            Initiates the shutdown of applications that are currently using resources that have been registered with <see cref="M:NanoByte.Common.Native.WindowsRestartManager.RegisterResources(System.String[])"/>.
            </summary>
            <param name="handler">A callback object used to report progress to the user and allow cancellation.</param>
            <exception cref="T:System.UnauthorizedAccessException">One or more applications could not be shut down. Trying again as administrator may help.</exception>
            <exception cref="T:System.IO.IOException">One or more applications could not be shut down. A system reboot may be required.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.RestartApps(NanoByte.Common.Tasks.ITaskHandler)">
            <summary>
            Restarts applications that have been shut down by <see cref="M:NanoByte.Common.Native.WindowsRestartManager.ShutdownApps(NanoByte.Common.Tasks.ITaskHandler)"/> and that have been registered to be restarted.
            </summary>
            <param name="handler">A callback object used to report progress to the user and allow cancellation.</param>
            <exception cref="T:System.IO.IOException">One or more applications could not be automatically restarted.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsTaskbar">
            <summary>
            Provides helper methods and API calls specific to the Windows 7 or newer taskbar.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState">
            <summary>
            Represents the thumbnail progress bar state.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.NoProgress">
            <summary>
            No progress is displayed.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Indeterminate">
            <summary>
            The progress is indeterminate (marquee).
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Normal">
            <summary>
            Normal progress is displayed.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Error">
            <summary>
            An error occurred (red).
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Paused">
            <summary>
            The operation is paused (yellow).
            </summary>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsTaskbar.ShellLink">
            <summary>
            Represents a shell link targeting a file.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Title">
            <summary>The title/name of the task link.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Path">
            <summary>The target path the link shall point to.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Arguments">
            <summary>Additional arguments for <see cref="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Title"/>; can be <see langword="null"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.IconPath">
            <summary>The path of the icon for the link.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.IconIndex">
            <summary>The resouce index within the file specified by <see cref="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.IconPath"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.ShellLink.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new shell link structure.
            </summary>
            <param name="title">The title/name of the task link.</param>
            <param name="path">The target path the link shall point to and to get the icon from.</param>
            <param name="arguments">Additional arguments for <paramref name="title"/>; can be <see langword="null"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.ShellLink.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new shell link structure
            </summary>
            <param name="title">The title/name of the task link.</param>
            <param name="path">The target path the link shall point to.</param>
            <param name="arguments">Additional arguments for <paramref name="title"/>; can be <see langword="null"/>.</param>
            <param name="iconPath">The path of the icon for the link.</param>
            <param name="iconIndex">The resouce index within the file specified by <paramref name="iconPath"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetProgressState(System.IntPtr,NanoByte.Common.Native.WindowsTaskbar.ProgressBarState)">
            <summary>
            Sets the state of the taskbar progress indicator.
            </summary>
            <param name="handle">The handle of the window whose taskbar button contains the progress indicator.</param>
            <param name="state">The state of the progress indicator.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetProgressValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Sets the value of the taskbar progress indicator.
            </summary>
            <param name="handle">The handle of the window whose taskbar button contains the progress indicator.</param>
            <param name="currentValue">The current value of the progress indicator.</param>
            <param name="maximumValue">The value <paramref name="currentValue"/> will have when the operation is complete.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetWindowAppID(System.IntPtr,System.String,System.String,System.String,System.String)">
            <summary>
            Sets a specific window's explicit application user model ID.
            </summary>
            <param name="hwnd">A handle to the window to set the ID for.</param>
            <param name="appID">The application ID to set.</param>
            <param name="relaunchCommand">The command to use for relaunching this specific window if it was pinned to the taskbar; can be <see langword="null"/>.</param>
            <param name="relaunchIcon">The icon to use for pinning this specific window to the taskbar (written as Path,ResourceIndex); can be <see langword="null"/>.</param>
            <param name="relaunchName">The user-friendly name to associate with <paramref name="relaunchCommand"/>; can be <see langword="null"/>.</param>
            <remarks>The application ID is used to group related windows in the taskbar.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.AddTaskLinks(System.String,System.Collections.Generic.IEnumerable{NanoByte.Common.Native.WindowsTaskbar.ShellLink})">
            <summary>
            Adds user-task links to the taskbar jumplist. Any existing task links are removed.
            </summary>
            <param name="appID">The application ID of the jumplist to add the task to.</param>
            <param name="links">The links to add to the jumplist.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.PreventPinning(System.IntPtr)">
            <summary>
            Prevents a specific window from being pinned to the taskbar.
            </summary>
            <param name="hwnd">A handle to the window to prevent from being pinned.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.ConvertShellLink(NanoByte.Common.Native.WindowsTaskbar.ShellLink)">
            <summary>
            Converts a managed shell link structure to a COM object.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.GetWindowPropertyStore(System.IntPtr)">
            <summary>
            Retrieves the property store for a window.
            </summary>
            <param name="hwnd">A handle to the window to retrieve the property store for.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetPropertyValue(NanoByte.Common.Native.WindowsTaskbar.IPropertyStore,NanoByte.Common.Native.WindowsTaskbar.PropertyKey,System.String)">
            <summary>
            Sets a property value.
            </summary>
            <param name="propertyStore">The property store to set the property in.</param>
            <param name="property">The property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsUtils">
            <summary>
            Provides helper methods and API calls specific to the Windows platform.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorFileNotFound">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that a file was not found.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorAccessDenied">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that access to a resource was denied.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorWriteFault">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that write access to a resource failed.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorSemTimeout">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that an operation timed out.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorAlreadyExists">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that an element (e.g. a file) already exists.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorMoreData">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that more data is available and the query should be repeated with a larger output buffer/array.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorRequestedOperationRequiresElevation">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that the requested application needs UAC elevation.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorCancelled">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that an operation was cancelled by the user.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.BuildException(System.Int32)">
            <summary>
            Builds a suitable <see cref="T:System.Exception"/> for a given <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows">
            <summary>
            <see langword="true"/> if the current operating system is Windows (9x- or NT-based); <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindowsNT">
            <summary>
            <see langword="true"/> if the current operating system is a modern Windows version (NT-based); <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindowsXP">
            <summary>
            <see langword="true"/> if the current operating system is Windows XP or newer; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindowsVista">
            <summary>
            <see langword="true"/> if the current operating system is Windows Vista or newer; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows7">
            <summary>
            <see langword="true"/> if the current operating system is Windows 7 or newer; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows8">
            <summary>
            <see langword="true"/> if the current operating system is Windows 8 or newer; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.Is64BitOperatingSystem">
            <summary>
            <see langword="true"/> if the current operating system is 64-bit capable; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.Is64BitProcess">
            <summary>
            <see langword="true"/> if the current process is 64-bit; <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.Is32BitProcessOn64BitOperatingSystem">
            <summary>
            <see langword="true"/> if the current process is 32-bit but the operating system is 64-bit capable; <see langword="false"/> otherwise.
            </summary>
            <remarks>Can only detect WOW on Windows XP and newer</remarks>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsAdministrator">
            <summary>
            Indicates whether the current user is an administrator. Always returns <see langword="true"/> on non-Windows NT systems.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsInteractive">
            <summary>
            Indicates whether the current process is running in an interactive session (rather than, e.g. as a service). Always returns <see langword="true"/> on non-Windows NT systems.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.CurrentProcessPath">
            <summary>
            Determines the path of the executable the current process was launched from.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx20">
            <summary>The full version number of the .NET Framework 2.0. This release contains a new compiler and CLR.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx30">
            <summary>The full version number of the .NET Framework 3.0.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx35">
            <summary>The full version number of the .NET Framework 3.5. This release contains a new compiler.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx40">
            <summary>The full version number of the .NET Framework 4.0. This release contains a new compiler and CLR.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.HasNetFxVersion(System.String)">
            <summary>
            Determines whether a specific version of the .NET framework is available.
            </summary>
            <param name="version">The full .NET version number including the leading "v". Use predefined constants when possible.</param>
            <returns><see langword="true"/> if the specified version is available, <see langword="false"/> otherwise.</returns>
            <remarks>Automatically uses 64-bit directories if <see cref="P:NanoByte.Common.Native.WindowsUtils.Is64BitProcess"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.GetNetFxDirectory(System.String)">
            <summary>
            Returns the .NET Framework root directory for a specific version of the .NET framework. Does not verify the directory actually exists!
            </summary>
            <param name="version">The full .NET version number including the leading "v". Use predefined constants when possible.</param>
            <returns>The path to the .NET Framework root directory.</returns>
            <remarks>Automatically uses 64-bit directories if <see cref="P:NanoByte.Common.Native.WindowsUtils.Is64BitProcess"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.SplitArgs(System.String)">
            <summary>
            Tries to split a command-line into individual arguments.
            </summary>
            <param name="commandLine">The command-line to be split.</param>
            <returns>
            An array of individual arguments.
            Will return the entire command-line as one argument when not running on Windows or if splitting failed for some other reason.
            </returns>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.AbsoluteTime">
            <summary>
            A time index in seconds that continuously increases.
            </summary>
            <remarks>Depending on the operating system this may be the time of the system clock or the time since the system booted.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.ReadAllBytes(System.String)">
            <summary>
            Reads the entire contents of a file using the Win32 API.
            </summary>
            <param name="path">The path of the file to read.</param>
            <returns>The contents of the file as a byte array; <see langword="null"/> if there was a problem reading the file.</returns>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
            <remarks>This method works like <see cref="M:System.IO.File.ReadAllBytes(System.String)"/>, but bypasses .NET's file path validation logic.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the entire contents of a byte array to a file using the Win32 API. Existing files with the same name are overwritten.
            </summary>
            <param name="path">The path of the file to write to.</param>
            <param name="data">The data to write to the file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file was denied.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">There was a problem writing the file.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
            <remarks>This method works like <see cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])"/>, but bypasses .NET's file path validation logic.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a symbolic link for a file or directory.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.IO.IOException">There was an IO problem creating the symlink.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the symbolic link.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The symbolic link creation failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT 6.0 (Vista) or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.CreateHardlink(System.String,System.String)">
            <summary>
            Creates a hard link between two files.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The absolute path of the existing file to point to.</param>
            <remarks>Only available on Windows 2000 or newer.</remarks>
            <exception cref="T:System.IO.IOException">There was an IO problem creating the hard link.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the hard link.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The hard link creation failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.AreHardlinked(System.String,System.String)">
            <summary>
            Determines whether to files are hardlinked.
            </summary>
            <param name="path1">The path of the first file.</param>
            <param name="path2">The path of the second file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem checking the files.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to check the files.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Checking the files failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.MoveFileOnReboot(System.String,System.String)">
            <summary>
            Moves a file on the next reboot of the OS. Replaces existing files.
            </summary>
            <param name="sourcePath">The source path to move the file from.</param>
            <param name="destinationPath">The destination path to move the file to. <see langword="null"/> to delete the file instead of moving it.</param>
            <remarks>Useful for replacing in-use files.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.SetCurrentProcessAppID(System.String)">
            <summary>
            Sets the current process' explicit application user model ID.
            </summary>
            <param name="appID">The application ID to set.</param>
            <remarks>The application ID is used to group related windows in the taskbar.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.NotifyAssocChanged">
            <summary>
            Informs the Windows shell that changes were made to the file association data in the registry.
            </summary>
            <remarks>This should be called immediatley after the changes in order to trigger a refresh of the Explorer UI.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.NotifyEnvironmentChanged">
            <summary>
            Informs all GUI applications that changes where made to the environment variables (e.g. PATH) and that they should re-pull them.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.RegisterWindowMessage(System.String)">
            <summary>
            Registers a new message type that can be sent to windows.
            </summary>
            <param name="message">A unique string used to identify the message type session-wide.</param>
            <returns>A unique ID number used to identify the message type session-wide.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.BroadcastMessage(System.Int32)">
            <summary>
            Sends a message of a specific type to all windows in the current session.
            </summary>
            <param name="messageID">A unique ID number used to identify the message type session-wide.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.RegisterApplicationRestart(System.String)">
            <summary>
            Registers the current application for automatic restart after updates or crashes.
            </summary>
            <param name="arguments">The command-line arguments to pass to the application on restart. Must not be empty!</param>
            <exception cref="T:System.ArgumentException"><paramref name="arguments"/> is too long.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.UnregisterApplicationRestart">
            <summary>
            Unregisters the current application for automatic restart after updates or crashes.
            </summary>
        </member>
        <member name="T:NanoByte.Common.NeedGuiException">
            <summary>
            Indicates that the requested operation requires a GUI.
            </summary>
        </member>
        <member name="M:NanoByte.Common.NeedGuiException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NeedGuiException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NeedGuiException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NeedGuiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.CachedCredentialProvider">
            <summary>
            Caching decorator for <see cref="T:NanoByte.Common.Net.ICredentialProvider"/>s.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.CachedCredentialProvider.Interactive">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.CachedCredentialProvider.#ctor(NanoByte.Common.Net.ICredentialProvider)">
            <summary>
            Creates a new caching dectorator.
            </summary>
            <param name="inner">The inner <see cref="T:NanoByte.Common.Net.ICredentialProvider"/> to wrap.</param>
        </member>
        <member name="M:NanoByte.Common.Net.CachedCredentialProvider.GetCredential(System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.CachedCredentialProvider.ReportInvalid(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.CliCredentialProvider">
            <summary>
            Asks the user for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s using a command-line prompt.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.CliCredentialProvider.#ctor(System.Boolean)">
            <summary>
            Creates a new command-line credential provider.
            </summary>
            <param name="interactive">Indicates whether the credential provider is interactive, i.e., can ask the user for input.</param>
        </member>
        <member name="M:NanoByte.Common.Net.CliCredentialProvider.GetCredential(System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.CredentialProviderBase">
            <summary>
            Common base class for <see cref="T:NanoByte.Common.Net.ICredentialProvider"/> implementations.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.CredentialProviderBase.Interactive">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.CredentialProviderBase.#ctor(System.Boolean)">
            <summary>
            Creates a new credential provider.
            </summary>
            <param name="interactive">Indicates whether the credential provider is interactive, i.e., can ask the user for input.</param>
        </member>
        <member name="M:NanoByte.Common.Net.CredentialProviderBase.GetCredential(System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.CredentialProviderBase.ReportInvalid(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.CredentialProviderBase.WasReportedInvalid(System.Uri)">
            <summary>
            Checks whether <paramref name="uri"/> was previously reported as invalid and resets the flag.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.DownloadFile">
            <summary>
            Downloads a file from a specific internet address to a local file.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.Target">
            <summary>
            The local path to save the file to.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadFile.#ctor(System.Uri,System.String,System.Int64)">
            <summary>
            Creates a new download task.
            </summary>
            <param name="source">The URL the file is to be downloaded from.</param>
            <param name="target">The local path to save the file to. A preexisting file will be overwritten.</param>
            <param name="bytesTotal">The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown.</param>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadFile.CreateTargetStream">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.DownloadMemory">
            <summary>
            Downloads a file from a specific internet address to an in-memory array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadMemory.#ctor(System.Uri,System.Int64)">
            <summary>
            Creates a new download task.
            </summary>
            <param name="source">The URL the file is to be downloaded from.</param>
            <param name="bytesTotal">The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown.</param>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadMemory.CreateTargetStream">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadMemory.GetData">
            <summary>
            Returns the downloaded data.
            </summary>
            <exception cref="T:System.InvalidOperationException">The download is not finished yet.</exception>
        </member>
        <member name="T:NanoByte.Common.Net.DownloadTask">
            <summary>
            Abstract base class for tasks that download a file from the web.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadTask.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadTask.Source">
            <summary>
            The URL the file is to be downloaded from.
            </summary>
            <remarks>This value may change once <see cref="F:NanoByte.Common.Tasks.TaskState.Data"/> has been reached, based on HTTP redirections.</remarks>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadTask.NoCache">
            <summary>
            Set to <see langword="true"/> to add a No-Cache header to the request for any intermediate proxy servers.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadTask.ResponseHeaders">
            <summary>
            The HTTP header data returned by the server for the download request. An empty collection in case of an FTP download.
            </summary>
            <remarks>This value is always <see langword="null"/> until <see cref="F:NanoByte.Common.Tasks.TaskState.Data"/> has been reached.</remarks>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadTask.#ctor(System.Uri,System.Int64)">
            <summary>
            Creates a new download task.
            </summary>
            <param name="source">The URL the file is to be downloaded from.</param>
            <param name="bytesTotal">The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown.</param>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadTask.Execute">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadTask.CreateTargetStream">
            <summary>
            Creates the <see cref="T:System.IO.Stream"/> to write the downloaded data to.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadTask.ReadHeader(System.Net.WebResponse)">
            <summary>
            Reads the header information in the <paramref name="response"/> and stores it the object properties.
            </summary>
            <returns><see langword="true"/> if everything is ok; <see langword="false"/> if there was an error.</returns>
        </member>
        <member name="T:NanoByte.Common.Net.ICredentialProvider">
            <summary>
            Asks the user or a keyring for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s.
            </summary>
            <remarks>Implementations of this interface are thread-safe.</remarks>
        </member>
        <member name="P:NanoByte.Common.Net.ICredentialProvider.Interactive">
            <summary>
            Indicates whether the credential provider is interactive, i.e., can ask the user for input.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.ICredentialProvider.ReportInvalid(System.Uri)">
            <summary>
            Report that the credentials that were retrieved for <paramref name="uri"/> were incorrect.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.NetUtils">
            <summary>
            Provides helper methods for the <see cref="N:System.Net"/> subsystem.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.NetUtils.ApplyProxy">
            <summary>
            Applies environment variable HTTP proxy server configuration if present.
            </summary>
            <remarks>Uses classic Linux environment variables: http_proxy, http_proxy_user, http_proxy_pass</remarks>
        </member>
        <member name="M:NanoByte.Common.Net.NetUtils.TrustCertificates(System.String[])">
            <summary>
            Makes the SSL validation subsystem trust a set of certificates, even if their certificate chain is not trusted.
            </summary>
            <param name="publicKeys">The public keys of the certificates to trust.</param>
            <remarks>This method affects the global state of the <see cref="T:System.AppDomain"/>. Calling it more than once is not cumulative and will overwrite previous certificates. You should call this method exactly once near the beginning of your application.</remarks>
        </member>
        <member name="T:NanoByte.Common.Net.UriExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Uri"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.ToStringRfc(System.Uri)">
            <summary>
            An alternate version of <see cref="M:System.Uri.ToString"/> that produces results escaped according to RFC 2396.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.EnsureTrailingSlash(System.Uri)">
            <summary>
            Adds a trailing slash to the URI if it does not already have one.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.ReparseAsAbsolute(System.Uri)">
            <summary>
            Reparses a URI (generated via conversion) to ensure it is a valid absolute URI.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.GetLocalFileName(System.Uri)">
            <summary>
            Extracts the file-name portion of an URI and ensures it is a valid file-name on the local OS.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.GetBaseUri(System.Uri)">
            <summary>
            Extracts the base part of an URI, i.e., the part that is used for resolving relative URIs.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.WebClientTimeout">
            <summary>
            Adds a customizable timout to <see cref="T:System.Net.WebClient"/>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Net.WebClientTimeout.DefaultTimeout">
            <summary>
            The default timeout value, in milliseconds, used when no explicit value is specified.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WebClientTimeout.#ctor">
            <summary>
            Creates a new <see cref="T:System.Net.WebClient"/> using <see cref="F:NanoByte.Common.Net.WebClientTimeout.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WebClientTimeout.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Net.WebClient"/>.
            </summary>
            <param name="timeout">The length of time, in milliseconds, before requests made by this <see cref="T:System.Net.WebClient"/> time out.</param>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsCliCredentialProvider">
            <summary>
            Asks for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s using <see cref="M:NanoByte.Common.Native.WindowsCredentials.PromptCli(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCliCredentialProvider.#ctor(System.Boolean)">
            <summary>
            Creates a new Windows command-line credential provider.
            </summary>
            <param name="interactive">Indicates whether the credential provider is interactive, i.e., can ask the user for input.</param>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCliCredentialProvider.Prompt(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsCredentialProvider">
            <summary>
            Asks for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s using <see cref="T:NanoByte.Common.Native.WindowsCredentials"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCredentialProvider.#ctor(System.Boolean)">
            <summary>
            Creates a new Windows credential provider.
            </summary>
            <param name="interactive">Indicates whether the credential provider is interactive, i.e., can ask the user for input.</param>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCredentialProvider.GetCredential(System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCredentialProvider.Prompt(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <summary>
            Performs the actual <see cref="T:NanoByte.Common.Native.WindowsCredentials"/> API call to prompt the user or the credential store for credentials.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <param name="flags">Flags for configuring the prompt.</param>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsDialogCredentialProvider">
            <summary>
            Asks for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s using <see cref="M:NanoByte.Common.Native.WindowsCredentials.PromptDialog(System.String,NanoByte.Common.Native.WindowsCredentialsFlags,System.String,System.String,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsDialogCredentialProvider.#ctor(System.Boolean)">
            <summary>
            Creates a new Windows GUI credential provider.
            </summary>
            <param name="interactive">Indicates whether the credential provider is interactive, i.e., can ask the user for input.</param>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsDialogCredentialProvider.Prompt(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.NotAdminException">
            <summary>
            Like a <see cref="T:System.UnauthorizedAccessException"/> but with the additional hint that retrying the operation as an administrator would fix the problem.
            </summary>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Parallel">
            <summary>
            A lightweight implementation of a small subset of Microsoft's Parallel Extensions for
            .Net 3.5/4.0 that can be used with the earlier .Net/C# 2.0
            </summary>
            <remarks>
            This is an analogue of "Microsoft Parallel Extensions to .NET Framework 3.5, June
            2008 Community Technology Preview" from:
            http://www.microsoft.com/downloads/details.aspx?FamilyID=348f73fd-593d-4b3c-b055-694c50d2b0f3&amp;DisplayLang=en
            It is not a full implementation, and should be deprecated when MEDIT switch to
            Visual Studio 2010/.Net 4.0 by using the Microsoft/Novell Mono equivalents.
            Mono already supports the Parallel Extensions.
            
            This class supports the Parallel.For and Parallel.ForEach loop constructs.
            
            See also:
            http://tirania.org/blog/archive/2008/Jul-26-1.html
            http://blogs.msdn.com/somasegar/archive/2008/06/02/june-2008-ctp-parallel-extensions-to-the-net-fx.aspx
            
            This should work on any version of C#/.Net that supports generics.
            </remarks>
        </member>
        <member name="T:NanoByte.Common.Parallel.WorkerThread">
            <summary>
            Background thread definition.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.WorkerThread.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NanoByte.Common.Parallel.WorkerThread"/> class.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.WorkerThread.Terminate">
            <summary>
            Wait for thread termination and close events.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.WorkerThread.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">if set to <c>true</c>, dispose managed resources.</param>
        </member>
        <member name="M:NanoByte.Common.Parallel.WorkerThread.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Parallel.WorkerThread.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="P:NanoByte.Common.Parallel.WorkerThread.TaskWaiting">
            <summary>
            Gets the task waiting message event.
            </summary>
            <value>The task waiting.</value>
        </member>
        <member name="P:NanoByte.Common.Parallel.WorkerThread.ThreadIdle">
            <summary>
            Gets the thread idle message event.
            </summary>
            <value>The thread idle.</value>
        </member>
        <member name="T:NanoByte.Common.Parallel.ParallelFor">
            <summary>
            Parallel For state class.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.instance">
            <summary>
            Single instance of parallelFor class for singleton pattern
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.LoopFunction">
            <summary>
            For-loop body
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.CancellationToken">
            <summary>
            For-loop body
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.currentJobIndex">
            <summary>
            Current loop index
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.stopIndex">
            <summary>
            Stop loop index
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.threadCount">
            <summary>
            Number of threads to utilise
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelFor.workerThreads">
            <summary>
            The worker threads.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelFor.DoFor(System.Int32,System.Int32,System.Action{System.Int32},NanoByte.Common.Tasks.CancellationToken)">
            <summary>
            Runs the For loop.
            </summary>
            <param name="start">The start.</param>
            <param name="stop">The stop.</param>
            <param name="loopBody">The loop body.</param>
            <param name="cancellationToken">Used to signal if the user wishes to cancel the loop before it completes.</param>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelFor.GetInstance(System.Int32)">
            <summary>
            Get instance of the ParallelFor class for singleton pattern and
            update the number of threads if appropriate.
            </summary>
            <param name="threadCount">The thread count.</param>
            <returns></returns>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelFor.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
            <param name="disposing">if set to <c>true</c>, dispose managed resources.</param>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelFor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Parallel.ParallelForEach`1">
            <summary>
            ParallelForEach state class.
            </summary>
            <typeparam name="T">type</typeparam>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelForEach`1.instance">
            <summary>
            Single instance of parallelFor class for singleton pattern
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelForEach`1.LoopFunction">
            <summary>
            Foreach-loop body
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelForEach`1.enumerator">
            <summary>
            Enumerator for the source IEnumerable.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelForEach`1.threadCount">
            <summary>
            Number of threads to utilise
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.ParallelForEach`1.workerThreads">
            <summary>
            The worker threads.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelForEach`1.DoForEach(System.Collections.Generic.IEnumerable{`0},System.Action{`0})">
            <summary>
            Runs the ForEach loop.
            </summary>
            <param name="items">The items.</param>
            <param name="loopBody">The loop body.</param>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelForEach`1.GetInstance(System.Int32)">
            <summary>
            Get instance of the ParallelFor class for singleton pattern and
            update the number of threads if appropriate.
            </summary>
            <param name="threadCount">The thread count.</param>
            <returns></returns>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelForEach`1.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
            <param name="disposing">if set to <c>true</c>, dispose managed resources.</param>
        </member>
        <member name="M:NanoByte.Common.Parallel.ParallelForEach`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.lockObject">
            <summary>
            Object for thread locking
            </summary>
        </member>
        <member name="F:NanoByte.Common.Parallel.threadCount">
            <summary>
            Number of threads to utilise
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NanoByte.Common.Parallel"/> class from being created.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
            <param name="disposing">if set to <c>true</c>, dispose managed resources.</param>
        </member>
        <member name="M:NanoByte.Common.Parallel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32},NanoByte.Common.Tasks.CancellationToken)">
            <summary>
            Executes a parallel For loop.
            </summary>
            <param name="start">Loop start index.</param>
            <param name="stop">Loop stop index.</param>
            <param name="loopBody">Loop body.</param>
            <param name="cancellationToken">Used to signal if the user wishes to cancel the loop before it completes.</param>
            <remarks>The method is used to parallelise for loop by running iterations across
            several threads.
            Example usage:
            <code>
            for ( int i = 0; i &lt; 10; i++ )
            {
              System.Diagnostics.Debug.WriteLine( "i = " + i );
            }
            </code>
            can be replaced by:
            <code>
            Parallel.For( 0, 10, delegate( int i )
            {
              System.Diagnostics.Debug.WriteLine( "i = " + i );
            } );
            </code>
            If <c>Parallel.ThreadCount</c> is exactly <c>1</c>, no threads are spawned.
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a parallel Foreach loop.
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="items">Loop items.</param>
            <param name="loopBody">Loop body.</param>
            <remarks>The method is used to parallelise for loop by running iterations across
            several threads.
            Example usage:
            <code>
            foreach ( Molecule molecule in molecules )
            {
            System.Diagnostics.Debug.WriteLine( "molecule.Title = " + molecule.Title );
            }
            </code>
            can be replaced by:
            <code>
            Parallel.ForEach{Molecule}( molecules, delegate( Molecule molecule )
            {
            System.Diagnostics.Debug.WriteLine( "molecule.Title = " + molecule.Title );
            } );
            </code>
            If <c>Parallel.ThreadCount</c> is exactly <c>1</c>, no threads are spawned.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Parallel.ThreadsCount">
            <summary>
            Gets or sets the number of threads used for parallel computations.
            </summary>
            <value>The threads count.</value>
            <remarks>
            By default the property is number of CPUs, i.e.,
            <see cref="P:System.Environment.ProcessorCount"/>. Setting the
            property to zero also causes it to be reset to this value.
            </remarks>
        </member>
        <member name="T:NanoByte.Common.ProcessUtils">
            <summary>
            Provides methods for launching child processes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Start(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts a new <see cref="T:System.Diagnostics.Process"/> and runs it in parallel with this one. Handles and wraps <see cref="T:System.ComponentModel.Win32Exception"/>s.
            </summary>
            <returns>The newly launched process; <see langword="null"/> if an existing process was reused.</returns>
            <exception cref="T:System.OperationCanceledException">The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation but UAC is not available because <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Start(System.String,System.String[])">
            <summary>
            Starts a new <see cref="T:System.Diagnostics.Process"/> and runs it in parallel with this one. Handles and wraps <see cref="T:System.ComponentModel.Win32Exception"/>s.
            </summary>
            <param name="fileName">The path of the file to open or executable to launch.</param>
            <param name="arguments">The command-line arguments to pass to the executable.</param>
            <returns>The newly launched process; <see langword="null"/> if an existing process was reused.</returns>
            <exception cref="T:System.OperationCanceledException">The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation but UAC is not available because <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Run(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts a new <see cref="T:System.Diagnostics.Process"/> and waits for it to complete. Handles and wraps <see cref="T:System.ComponentModel.Win32Exception"/>s.
            </summary>
            <returns>The exit code of the child process.</returns>
            <exception cref="T:System.OperationCanceledException">The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation but UAC is not available because <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <see langword="false"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Assembly(System.String,System.String[])">
            <summary>
            Creates a <see cref="T:System.Diagnostics.ProcessStartInfo"/> for launching an assembly located in <see cref="F:NanoByte.Common.Storage.Locations.InstallBase"/>.
            </summary>
            <param name="name">The name of the assembly to launch (without the file extension).</param>
            <param name="arguments">The command-line arguments to pass to the assembl.</param>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.AsAdmin(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Modifies a <see cref="T:System.Diagnostics.ProcessStartInfo"/> to request elevation to Administrator on Windows.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The current OS is not Windows NT-based or UAC is disabled.</exception>
            <remarks>Uses the "Run as" dialog on Windows 2000, XP and 2003.</remarks>
        </member>
        <member name="T:NanoByte.Common.Properties.ImageResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.AddButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.ClearButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.DeleteButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.Error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.Info">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.ImageResources.Warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ArchiveInvalid">
            <summary>
              Looks up a localized string similar to The archive file is invalid or damaged..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ArgMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The argument must be greater than zero..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ArgMustNotBeNegative">
            <summary>
              Looks up a localized string similar to The argument may not be less than zero..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.AtLeast2Values">
            <summary>
              Looks up a localized string similar to You need to pass at least two values..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Back">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CannotAddCollectionToSelf">
            <summary>
              Looks up a localized string similar to The collection cannot be added to itself..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CannotCanonicalizeDacl">
            <summary>
              Looks up a localized string similar to The DACL cannot be canonicalized since it would potentially result in a loss of information..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ContentArchivesAlreadyLoaded">
            <summary>
              Looks up a localized string similar to The content archives were already loaded.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CopyFiles">
            <summary>
              Looks up a localized string similar to Copying files.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CopyToClipboard">
            <summary>
              Looks up a localized string similar to &amp;Copy to clipboard.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.DestinationDirExist">
            <summary>
              Looks up a localized string similar to The destination directory already exists..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Downloading">
            <summary>
              Looks up a localized string similar to Downloading {0}.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReportSent">
            <summary>
              Looks up a localized string similar to The error report was sent successfully..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FailedToDownload">
            <summary>
              Looks up a localized string similar to Failed to download {0}..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FailedToRollback">
            <summary>
              Looks up a localized string similar to Failed to rollback &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FileNotExpectedSize">
            <summary>
              Looks up a localized string similar to The file that was supposed to be downloaded from {0} doesn&apos;t have the expected size. Was supposed to be {1} bytes but was actually {2} bytes..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FileNotFound">
            <summary>
              Looks up a localized string similar to The file &quot;{0}&quot; could not be found..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.HideDetails">
            <summary>
              Looks up a localized string similar to Hide details.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.HttpAndFtpOnly">
            <summary>
              Looks up a localized string similar to Only HTTP and FTP are supported download protocols..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.InvalidConfigDir">
            <summary>
              Looks up a localized string similar to The configuration directory &apos;{0}&apos; is probably invalid..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.InvalidCredentials">
            <summary>
              Looks up a localized string similar to The login credentials for {0} are incorrect..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ItemAlreadyInPool">
            <summary>
              Looks up a localized string similar to The item is already in a pool. It can not be added to more than one pool..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.KeyAlreadyPresent">
            <summary>
              Looks up a localized string similar to The key was already present in the dictionary..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.KeyNotFound">
            <summary>
              Looks up a localized string similar to The key was not found in the collection..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.LoseChangesAsk">
            <summary>
              Looks up a localized string similar to Warning! All your changes to this file will be lost. Do you wish to continue?.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.MaxElementsExceeded">
            <summary>
              Looks up a localized string similar to The maximum amount of elements in the collection has been exceeded..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.MinLargerMax">
            <summary>
              Looks up a localized string similar to The Min value may not be larger than the Max value..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.MissingDispatchAction">
            <summary>
              Looks up a localized string similar to No action registered for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.MissingStreamSeekSupport">
            <summary>
              Looks up a localized string similar to The stream must support seeking..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NoBinaryDataInZip">
            <summary>
              Looks up a localized string similar to There was no binary data found in the ZIP file..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NoModActive">
            <summary>
              Looks up a localized string similar to There is currently no active mod..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NoSystemConfigInPortableMode">
            <summary>
              Looks up a localized string similar to System configuration cannot be edited in portable mode..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NotAnImage">
            <summary>
              Looks up a localized string similar to The file is not a valid image..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NotFoundGameContentDir">
            <summary>
              Looks up a localized string similar to The game content directory could not be found:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NotFoundGameContentFile">
            <summary>
              Looks up a localized string similar to The following game content file could not be found:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NotFoundModContentDir">
            <summary>
              Looks up a localized string similar to The mod directory could not be found:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NoXmlDataInZip">
            <summary>
              Looks up a localized string similar to There was no XML data found in the ZIP file..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.OnlyAvailableOnWindows">
            <summary>
              Looks up a localized string similar to This method is only available on Windows..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Password">
            <summary>
              Looks up a localized string similar to Password:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.PleasEnterCredentials">
            <summary>
              Looks up a localized string similar to Please enter login credentials for {0}:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ProblemLoading">
            <summary>
              Looks up a localized string similar to There was a problem loading &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.RedoNotAvailable">
            <summary>
              Looks up a localized string similar to This command cannot be performed again until the undo command has been performed..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ResetValue">
            <summary>
              Looks up a localized string similar to &amp;Reset value.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.RestartingApps">
            <summary>
              Looks up a localized string similar to Restarting applications.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Revert">
            <summary>
              Looks up a localized string similar to Revert.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Search">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.SearchingFileReferences">
            <summary>
              Looks up a localized string similar to Searching for open file references.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ShowDetails">
            <summary>
              Looks up a localized string similar to Show details.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ShuttingDownApps">
            <summary>
              Looks up a localized string similar to Shutting down applications.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.SourceDestinationEqual">
            <summary>
              Looks up a localized string similar to Source and destination are equal..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.SourceDirNotExist">
            <summary>
              Looks up a localized string similar to The source directory does not exist..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateComplete">
            <summary>
              Looks up a localized string similar to Complete.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateData">
            <summary>
              Looks up a localized string similar to Processing data.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateHeader">
            <summary>
              Looks up a localized string similar to Getting headers.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateIOError">
            <summary>
              Looks up a localized string similar to IO error.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateMustBeReady">
            <summary>
              Looks up a localized string similar to The state must be &quot;Ready&quot;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateReady">
            <summary>
              Looks up a localized string similar to Ready.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateWebError">
            <summary>
              Looks up a localized string similar to Web error.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.TargetsOldValuesLength">
            <summary>
              Looks up a localized string similar to Length of targets must be equal to Length of oldValues.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnableToDelete">
            <summary>
              Looks up a localized string similar to The file could not be deleted..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnableToLaunchBundled">
            <summary>
              Looks up a localized string similar to The bundled {0} installation could not be launched. Please reinstall the application..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnableToLocateAssembly">
            <summary>
              Looks up a localized string similar to The assembly named &quot;{0}&quot; could not be located..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UndoNotAvailable">
            <summary>
              Looks up a localized string similar to This undo command cannot be performed until the actual command has been performed..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnixSubsystemFail">
            <summary>
              Looks up a localized string similar to The Unix subsystem failed to process the request. You may have insufficient rights..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UserCancel">
            <summary>
              Looks up a localized string similar to The user has chosen to cancel the operation..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UserName">
            <summary>
              Looks up a localized string similar to User name:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:NanoByte.Common.PropertyPointer`1">
            <summary>
            Wraps delegate-based access to a value as a property.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
        </member>
        <member name="P:NanoByte.Common.PropertyPointer`1.Value">
            <summary>
            Transparent access to the wrapper value.
            </summary>
        </member>
        <member name="P:NanoByte.Common.PropertyPointer`1.DefaultValue">
            <summary>
            The default value of the property.
            </summary>
        </member>
        <member name="P:NanoByte.Common.PropertyPointer`1.IsDefaultValue">
            <summary>
            <see langword="true"/> if <see cref="P:NanoByte.Common.PropertyPointer`1.Value"/> is equal to <see cref="P:NanoByte.Common.PropertyPointer`1.DefaultValue"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.PropertyPointer`1.NeedsEncoding">
            <summary>
            Indicates that this property needs to be encoded (e.g. as base64) before it can be stored in a file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer`1.#ctor(System.Func{`0},System.Action{`0},`0,System.Boolean)">
            <summary>
            Creates a property pointer.
            </summary>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the valuel.</param>
            <param name="defaultValue">The default value of the property</param>
            <param name="needsEncoding">Indicates that this property needs to be encoded (e.g. as base64) before it can be stored in a file.</param>
        </member>
        <member name="T:NanoByte.Common.PropertyPointer">
            <summary>
            Provides factory methods for <see cref="T:NanoByte.Common.PropertyPointer`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ToStringPointer(NanoByte.Common.PropertyPointer{System.Boolean})">
            <summary>
            Wraps a <see cref="T:System.Boolean"/> pointer in a <see cref="T:System.String"/> pointer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ToStringPointer(NanoByte.Common.PropertyPointer{System.Int32})">
            <summary>
            Wraps an <see cref="T:System.Int32"/> pointer in a <see cref="T:System.String"/> pointer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ToStringPointer(NanoByte.Common.PropertyPointer{System.Int64})">
            <summary>
            Wraps an <see cref="T:System.Int64"/> pointer in a <see cref="T:System.String"/> pointer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ToStringPointer(NanoByte.Common.PropertyPointer{System.TimeSpan})">
            <summary>
            Wraps a <see cref="T:System.TimeSpan"/> pointer in a <see cref="T:System.String"/> pointer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ToStringPointer(NanoByte.Common.PropertyPointer{System.Uri})">
            <summary>
            Wraps an <see cref="T:System.Uri"/> pointer in a <see cref="T:System.String"/> pointer.
            </summary>
        </member>
        <member name="T:NanoByte.Common.RegistryUtils">
            <summary>
            Provides utility and extension methods for <see cref="T:Microsoft.Win32.Registry"/> access.
            </summary>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.GetDword(System.String,System.String,System.Int32)">
            <summary>
            Reads a DWORD value from the registry.
            </summary>
            <param name="keyName">The full path of the key to read from.</param>
            <param name="valueName">The name of the value to read.</param>
            <param name="defaultValue">The default value to return if the key or value does not exist.</param>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.SetDword(System.String,System.String,System.Int32)">
            <summary>
            Sets a DWORD value in the registry.
            </summary>
            <param name="keyName">The full path of the key to write to.</param>
            <param name="valueName">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.GetString(System.String,System.String,System.String)">
            <summary>
            Reads a string value from the registry.
            </summary>
            <param name="keyName">The full path of the key to read from.</param>
            <param name="valueName">The name of the value to read.</param>
            <param name="defaultValue">The default value to return if the key or value does not exist.</param>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string value in the registry.
            </summary>
            <param name="keyName">The full path of the key to write to.</param>
            <param name="valueName">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.GetSoftwareString(System.String,System.String,System.String)">
            <summary>
            Reads a string value from one of the SOFTWARE keys in the registry.
            </summary>
            <remarks>Checks HKLM\SOFTWARE, HKLM\SOFTWARE\Wow6432Node and HKCU\SOFTWARE in that order.</remarks>
            <param name="subkeyName">The path of the key relative to the SOFTWARE key.</param>
            <param name="valueName">The name of the value to read.</param>
            <param name="defaultValue">The default value to return if the key or value does not exist.</param>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.SetSoftwareString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets a string value in one or more of the SOFTWARE keys in the registry.
            </summary>
            <param name="subkeyName">The path of the key relative to the SOFTWARE key.</param>
            <param name="valueName">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="machineWide"><see langword="true"/> to write to HKLM\SOFTWARE (and HKLM\SOFTWARE\Wow6432Node if <see cref="P:NanoByte.Common.Native.WindowsUtils.Is64BitProcess"/>); <see langword="false"/> to write to HCKU\SOFTWARE.</param>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.GetValueNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves the names of all values within a specific subkey of a registry root.
            </summary>
            <param name="key">The root key to look within.</param>
            <param name="subkeyName">The path of the subkey below <paramref name="key"/>.</param>
            <returns>A list of value names; an empty array if the key does not exist.</returns>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.GetSubKeyNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves the names of all subkeys within a specific subkey of a registry root.
            </summary>
            <param name="key">The root key to look within.</param>
            <param name="subkeyName">The path of the subkey below <paramref name="key"/>.</param>
            <returns>A list of key names; an empty array if the key does not exist.</returns>
            <exception cref="T:System.IO.IOException">Registry access failed.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.OpenSubKeyChecked(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Like <see cref="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)"/> but with no <see langword="null"/> return values.
            </summary>
            <param name="key">The key to open a subkey in.</param>
            <param name="subkeyName">The name of the subkey to open.</param>
            <param name="writable"><see langword="true"/> for write-access to the key.</param>
            <returns>The newly created subkey.</returns>
            <exception cref="T:System.IO.IOException">Failed to open the key.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.CreateSubKeyChecked(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Like <see cref="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)"/> but with no <see langword="null"/> return values.
            </summary>
            <param name="key">The key to create a subkey in.</param>
            <param name="subkeyName">The name of the subkey to create.</param>
            <returns>The newly created subkey.</returns>
            <exception cref="T:System.IO.IOException">Failed to create the key.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.RegistryUtils.OpenHklmKey(System.String,System.Boolean@)">
            <summary>
            Opens a HKEY_LOCAL_MACHINE key in the registry for reading, first trying to find the 64-bit version of it, then falling back to the 32-bit version.
            </summary>
            <param name="subkeyName">The path to the key below HKEY_LOCAL_MACHINE.</param>
            <param name="x64">Indicates whether a 64-bit key was opened.</param>
            <returns>The opened registry key or <see langword="null"/> if it could not found.</returns>
            <exception cref="T:System.IO.IOException">Failed to open the key.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to the key is not permitted.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.AtomicWrite">
            <summary>
            Provides a temporary path to write to and atomically inserts it at the destination location on disposal (if <see cref="M:NanoByte.Common.Storage.AtomicWrite.Commit"/> was called).
            </summary>
            <example><code>
            using (var atomic = new AtomicWrite(filePath))
            {
                File.WriteAllBytes(atomic.WritePath, fileData);
                atomic.Commit();
            }
            </code></example>
        </member>
        <member name="P:NanoByte.Common.Storage.AtomicWrite.DestinationPath">
            <summary>
            The file path of the final destination.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.AtomicWrite.WritePath">
            <summary>
            The temporary file path to write to.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.AtomicWrite.IsCommited">
            <summary>
            <see langword="true"/> if <see cref="M:NanoByte.Common.Storage.AtomicWrite.Commit"/> has been called.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicWrite.#ctor(System.String)">
            <summary>
            Prepares a atomic write operation.
            </summary>
            <param name="path">The file path of the final destination.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicWrite.Commit">
            <summary>
            Allows the new file to be deployed upon <see cref="M:NanoByte.Common.Storage.AtomicWrite.Dispose"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicWrite.Dispose">
            <summary>
            Replaces <see cref="P:NanoByte.Common.Storage.AtomicWrite.DestinationPath"/> with the contents of <see cref="P:NanoByte.Common.Storage.AtomicWrite.WritePath"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.BinaryStorage">
            <summary>
            Provides easy serialization to binary files (optionally wrapped in ZIP archives).
            </summary>
            <remarks>This class serializes private fields.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.LoadBinary``1(System.IO.Stream)">
            <summary>
            Loads an object from a binary file.
            </summary>
            <typeparam name="T">The type of object the binary stream shall be converted into.</typeparam>
            <param name="stream">The binary file to be loaded.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the binary data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.LoadBinary``1(System.String)">
            <summary>
            Loads an object from a binary filen
            </summary>
            <typeparam name="T">The type of object the binary stream shall be converted into.</typeparam>
            <param name="path">The binary file to be loaded.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the binary data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.SaveBinary``1(``0,System.IO.Stream)">
            <summary>
            Saves an object in a binary stream.
            </summary>
            <typeparam name="T">The type of object to be saved in a binary stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="stream">The binary file to be written.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.SaveBinary``1(``0,System.String)">
            <summary>
            Saves an object in a binary file.
            </summary>
            <remarks>This method performs an atomic write operation when possible.</remarks>
            <typeparam name="T">The type of object to be saved in a binary stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="path">The binary file to be written.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file is not permitted.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.CopyDirectory">
            <summary>
            Copies the content of a directory to a new location preserving the original file modification times and relative Unix symlinks.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.SourcePath">
            <summary>
            The path of source directory. Must exist!
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.DestinationPath">
            <summary>
            The path of the target directory. May exist. Must be empty if <see cref="P:NanoByte.Common.Storage.CopyDirectory.Overwrite"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.PreserveDirectoryTimestamps">
            <summary>
            <see langword="true"/> to preserve the modification times for directories as well; <see langword="false"/> to preserve only the file modification times.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.Overwrite">
            <summary>
            Overwrite exisiting files and directories at the <see cref="P:NanoByte.Common.Storage.CopyDirectory.DestinationPath"/>. This will even replace read-only files!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new directory copy task.
            </summary>
            <param name="sourcePath">The path of source directory. Must exist!</param>
            <param name="destinationPath">The path of the target directory. May exist. Must be empty if <paramref name="overwrite"/> is <see langword="false"/>.</param>
            <param name="preserveDirectoryTimestamps"><see langword="true"/> to preserve the modification times for directories as well; <see langword="false"/> to preserve only the file modification times.</param>
            <param name="overwrite">Overwrite exisiting files and directories at the <paramref name="destinationPath"/>. This will even replace read-only files!</param>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.Execute">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.CopyFile(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Copies a single file from one location to another. Can be overridden to modify the copying behavior.
            </summary>
            <exception cref="T:System.IO.IOException">A problem occurred while copying the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the <paramref name="sourceFile"/> or write access to the <paramref name="destinationFile"/> is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a Unix symbolic link. Can be overridden to modify the symlinking behavior.
            </summary>
            <param name="linkPath">The path of the link to create.</param>
            <param name="linkTarget">The path of the existing file or directory to point to (relative to <paramref name="linkPath"/>).</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:System.IO.IOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.FileUtils">
            <summary>
            Provides filesystem-related helper methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.UnifySlashes(System.String)">
            <summary>
            Replaces Unix-style directory slashes with <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsBreakoutPath(System.String)">
            <summary>
            Determines whether a path might escape its parent directory (by being absolute or using ..).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.RelativeTo(System.IO.FileSystemInfo,System.IO.FileSystemInfo)">
            <summary>
            Returns a relative path pointing to <paramref name="target"/> from <paramref name="baseRef"/> using Unix/Uri-style directory separators.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ExpandUnixVariables(System.String,System.Collections.Specialized.StringDictionary)">
            <summary>
            Expands/substitutes any Unix-style environment variables in the string.
            </summary>
            <param name="value">The string containing variables to be expanded.</param>
            <param name="variables">The list of variables available for expansion.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ExistsCaseSensitive(System.String)">
            <summary>
            Like <see cref="M:System.IO.File.Exists(System.String)"/> but case-sensitive, even on Windows.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Touch(System.String)">
            <summary>
            Sets the "last modified" timestamp for a file to now. Creates a new empty file if it does not exist yet.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ToUnixTime(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> into the number of seconds since the Unix epoch (1970-1-1).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.FromUnixTime(System.Int64)">
            <summary>
            Converts a number of seconds since the Unix epoch (1970-1-1) into a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.DetermineTimeAccuracy(System.String)">
            <summary>
            Determines the accuracy with which the filesystem underlying a specific directory can store file-changed times.
            </summary>
            <param name="path">The path of the directory to check.</param>
            <returns>The accuracy in number of seconds. (i.e. 0 = perfect, 1 = may be off by up to one second)</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory doesn't exist.</exception>
            <exception cref="T:System.IO.IOException">Writing to the directory fails.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to write to the directory.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.FormatBytes(System.Int64,System.IFormatProvider)">
            <summary>
            Formats a byte number in human-readable form (KB, MB, GB).
            </summary>
            <param name="value">The value in bytes.</param>
            <param name="provider">Provides culture-specific formatting information.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.GetTempFile(System.String)">
            <summary>
            Creates a uniquely named, empty temporary file on disk and returns the full path of that file.
            </summary>
            <param name="prefix">A short string the filename should start with.</param>
            <returns>The full path of the newly created temporary file.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a file in <see cref="M:System.IO.Path.GetTempPath"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a file in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
            <remarks>Use this method, because <see cref="M:System.IO.Path.GetTempFileName"/> exhibits buggy behaviour in some Mono versions.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.GetTempDirectory(System.String)">
            <summary>
            Creates a uniquely named, empty temporary directory on disk and returns the full path of that directory.
            </summary>
            <param name="prefix">A short string the filename should start with.</param>
            <returns>The full path of the newly created temporary directory.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory in <see cref="M:System.IO.Path.GetTempPath"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
            <remarks>Use this method, because <see cref="M:System.IO.Path.GetTempFileName"/> exhibits buggy behaviour in some Mono versions.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Replace(System.String,System.String)">
            <summary>
            Replaces one file with another. Rolls back in case of problems. If the destination file does not exist yet, this acts like a simple rename.
            </summary>
            <param name="sourcePath">The path of source directory.</param>
            <param name="destinationPath">The path of the target directory. Must reside on the same filesystem as <paramref name="sourcePath"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> and <paramref name="destinationPath"/> are equal.</exception>
            <exception cref="T:System.IO.IOException">The file could not be replaced.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The read or write access to one of the files was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ReadFirstLine(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Reads the first line of text from a file.
            </summary>
            <param name="file">The file to read from.</param>
            <param name="encoding">The text encoding to use for reading.</param>
            <returns>The first line of text in the file; <see langword="null"/> if decoding does not work on the contents.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Walk(System.IO.DirectoryInfo,System.Action{System.IO.DirectoryInfo},System.Action{System.IO.FileInfo},System.Boolean)">
            <summary>
            Walks a directory structure recursivley and performs an action for every directory and file encountered.
            </summary>
            <param name="directory">The directory to walk.</param>
            <param name="dirAction">The action to perform for every found directory (including the starting <paramref name="directory"/>); can be <see langword="null"/>.</param>
            <param name="fileAction">The action to perform for every found file; can be <see langword="null"/>.</param>
            <param name="followDirSymlinks">If <see langword="true"/> recurse into directory symlinks; if <see langword="false"/> only execute <paramref name="dirAction"/> for directory symlinks but do not recurse.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.WalkThroughPrefix(System.IO.DirectoryInfo)">
            <summary>
            Skips through any directories that only contain a single subdirectory and no files.
            </summary>
            <remarks>Ignores files that start with a dot.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.GetFilesRecursive(System.String)">
            <summary>
            Returns the full paths of all files in a directory and its subdirectories.
            </summary>
            <param name="path">The path of the directory to search for files.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ResetAcl(System.IO.DirectoryInfo)">
            <summary>
            Removes any custom ACLs a user may have set, restores ACL inheritance and sets the Administrators group as the owner.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ResetAcl``1(System.Func{``0},System.Action{``0})">
            <summary>
            Helper method for <see cref="M:NanoByte.Common.Storage.FileUtils.ResetAcl(System.IO.DirectoryInfo)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.CanonicalizeAcl(System.Security.AccessControl.ObjectSecurity)">
            <summary>
            Fixes ACLs that are not canonical (not ordered correctly).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.EnableWriteProtection(System.String)">
            <summary>
            Uses the best means the current platform provides to prevent further write access to a directory (read-only attribute, ACLs, Unix octals, etc.).
            </summary>
            <remarks>May do nothing if the platform doesn't provide any known protection mechanisms.</remarks>
            <param name="path">The directory to protect.</param>
            <exception cref="T:System.IO.IOException">There was a problem applying the write protection.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to apply the write protection.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.DisableWriteProtection(System.String)">
            <summary>
            Removes whatever means the current platform provides to prevent write access to a directory (read-only attribute, ACLs, Unix octals, etc.).
            </summary>
            <remarks>May do nothing if the platform doesn't provide any known protection mechanisms.</remarks>
            <param name="path">The directory to unprotect.</param>
            <exception cref="T:System.IO.IOException">There was a problem removing the write protection.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to remove the write protection.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a new symbolic link to a file or directory.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.IO.IOException">Creating the symbolic link failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the symbolic link.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a system with no symbolic link support.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.CreateHardlink(System.String,System.String)">
            <summary>
            Creates a new hard link between two files.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The absolute path of the existing file to point to.</param>
            <exception cref="T:System.IO.IOException">Creating the hard link failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the hard link.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a system with no hard link support.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.AreHardlinked(System.String,System.String)">
            <summary>
            Determines whether two files are hardlinked.
            </summary>
            <param name="path1">The path of the first file.</param>
            <param name="path2">The path of the second file.</param>
            <exception cref="T:System.IO.IOException">Creating the files failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to check the files.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsRegularFile(System.String)">
            <summary>
            Checks whether a file is a regular file (i.e. not a device file, symbolic link, etc.).
            </summary>
            <return><see lang="true"/> if <paramref name="path"/> points to a regular file; <see lang="false"/> otherwise.</return>
            <remarks>Will return <see langword="false"/> for non-existing files.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to query the file's properties.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is a symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is a symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <return><see lang="true"/> if <paramref name="path"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsSymlink(System.IO.FileSystemInfo,System.String@)">
            <summary>
            Checks whether a file is a Unix symbolic link.
            </summary>
            <param name="item">The file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <return><see lang="true"/> if <paramref name="item"/> points to a symbolic link; <see lang="false"/> otherwise.</return>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsExecutable(System.String)">
            <summary>
            Checks whether a file is marked as Unix-executable.
            </summary>
            <return><see lang="true"/> if <paramref name="path"/> points to an executable; <see lang="false"/> otherwise.</return>
            <remarks>Will return <see langword="false"/> for non-existing files. Will always return <see langword="false"/> on non-Unixoid systems.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to query the file's properties.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.SetExecutable(System.String,System.Boolean)">
            <summary>
            Marks a file as Unix-executable or not Unix-executable. Only works on Unixoid systems!
            </summary>
            <param name="path">The file to mark as executable or not executable.</param>
            <param name="executable"><see lang="true"/> to mark the file as executable, <see lang="true"/> to mark it as not executable.</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> points to a file that does not exist or cannot be accessed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to change the file's properties.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a non-Unixoid system.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsUnixFS(System.String)">
            <summary>
            Checks whether a directory is located on a filesystem with support for Unixoid features such as executable bits.
            </summary>
            <return><see lang="true"/> if <paramref name="path"/> points to directory on a Unixoid filesystem; <see lang="false"/> otherwise.</return>
            <remarks>
            Will always return <see langword="false"/> on non-Unixoid systems.
            Only requires read access on Linux to determine file system.
            Requires write access on other Unixes (e.g. MacOS X).
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory doesn't exist.</exception>
            <exception cref="T:System.IO.IOException">Checking the directory failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient right to stat to the directory.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsUnixFSFallback(System.String)">
            <summary>
            Checks whether a directory is located on a filesystem with support for executable bits by setting and reading them back.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ReadExtendedMetadata(System.String,System.String)">
            <summary>
            Reads metadata from an NTFS Alternate Data Stream (Windows) or extended file attribute (Unixoid).
            </summary>
            <param name="path">The path of the file the Alternate Data Stream is associated with.</param>
            <param name="name">The name of the metadata stream.</param>
            <returns>The contents of the metadata stream; <see langword="null"/> if the file exists but the stream specified by <paramref name="name"/> does not.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">There was a problem reading the metadata stream.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system provides no method for storing extended metadata.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.WriteExtendedMetadata(System.String,System.String,System.Byte[])">
            <summary>
            Writes metadata to an NTFS Alternate Data Stream (Windows) or extended file attribute (Unixoid).
            </summary>
            <param name="path">The path of the file to assoicate the metadata with.</param>
            <param name="name">The name of the metadata stream.</param>
            <param name="data">The data to write to the metadata stream.</param>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">There was a problem writing the metadata stream.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to write the metadata.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system provides no method for storing extended metadata.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.Locations">
            <summary>
            Provides easy access to platform-specific common directories for storing settings and application data.
            </summary>
            <remarks>
            Uses <see cref="T:System.Environment.SpecialFolder"/> on Windows and the freedesktop.org basedir spec (XDG) on Linux.
            See http://freedesktop.org/wiki/Standards/basedir-spec
            </remarks>
        </member>
        <member name="F:NanoByte.Common.Storage.Locations.InstallBase">
            <summary>
            The directory the application binaries are located in.
            </summary>
            <remarks>
            Uses the location of the NanoByte.Common DLL, not the calling EXE.
            Works with ngened and shadow copied assemblies.
            Does not work with GACed assemblies.
            </remarks>
        </member>
        <member name="F:NanoByte.Common.Storage.Locations.PortableFlagName">
            <summary>
            The name of the flag file whose existence determines whether <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.IsPortable">
            <summary>
            Indicates whether the application is currently operating in portable mode.
            </summary>
            <remarks>
              <para>Portable mode is activated by placing a file named <see cref="F:NanoByte.Common.Storage.Locations.PortableFlagName"/> in <see cref="F:NanoByte.Common.Storage.Locations.InstallBase"/>.</para>
              <para>When portable mode is active files are stored and loaded from <see cref="P:NanoByte.Common.Storage.Locations.PortableBase"/> instead of the user profile and sysem directories.</para>
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.PortableBase">
            <summary>
            The directory used for storing files if <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>. Defaults to <see cref="F:NanoByte.Common.Storage.Locations.InstallBase"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.HomeDir">
            <summary>
            The home/profile directory of the current user.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.UserConfigDir">
            <summary>
            The directory to store per-user settings (can roam across different machines).
            </summary>
            <remarks>On Windows this is <c>%appdata%</c>, on Linux it usually is <c>~/.config</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.UserDataDir">
            <summary>
            The directory to store per-user data files (should not roam across different machines).
            </summary>
            <remarks>On Windows this is <c>%localappdata%</c>, on Linux it usually is <c>~/.local/share</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.UserCacheDir">
            <summary>
            The directory to store per-user non-essential data (should not roam across different machines).
            </summary>
            <remarks>On Windows this is <c>%localappdata%</c>, on Linux it usually is <c>~/.cache</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.SystemConfigDirs">
            <summary>
            The directories to store machine-wide settings.
            </summary>
            <returns>Directories separated by <see cref="F:System.IO.Path.PathSeparator"/> sorted by decreasing importance.</returns>
            <remarks>On Windows this is <c>CommonApplicationData</c>, on Linux it usually is <c>/etc/xdg</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.SystemDataDirs">
            <summary>
            The directories to store machine-wide data files (should not roam across different machines).
            </summary>
            <returns>Directories separated by <see cref="F:System.IO.Path.PathSeparator"/> sorted by decreasing importance.</returns>
            <remarks>On Windows this is <c>CommonApplicationData</c>, on Linux it usually is <c>/usr/local/share:/usr/share</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.SystemCacheDir">
            <summary>
            The directory to store machine-wide non-essential data.
            </summary>
            <remarks>On Windows this is <c>CommonApplicationData</c>, on Linux it is <c>/var/cache</c>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetEnvironmentVariable(System.String,System.String)">
            <summary>
            Returns the value of an environment variable or a default value if it isn't set.
            </summary>
            <param name="variable">The name of the environment variable to retrieve.</param>
            <param name="defaultValue">The default value to return if the environment variable was not set.</param>
            <returns>The value of the environment variable or <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetSaveConfigPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for storing a configuration resource (can roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>.</param>
            <param name="isFile"><see langword="true"/> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be stored.</param>
            <returns>A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetSaveSystemConfigPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for storing a system-wide configuration resource.
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>.</param>
            <param name="isFile"><see langword="true"/> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be stored.</param>
            <returns>A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetLoadConfigPaths(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a list of paths for loading a configuration resource.
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>.</param>
            <param name="isFile"><see langword="true"/> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be loaded.</param>
            <returns>
            A list of fully qualified paths to use to load the resource sorted by decreasing importance.
            This list will always reflect the current state in the filesystem and can not be modified! It may be empty.
            </returns>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetSaveDataPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for storing a data resource (should not roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>.</param>
            <param name="isFile"><see langword="true"/> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be stored.</param>
            <returns>A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetLoadDataPaths(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a list of paths for loading a data resource (should not roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>.</param>
            <param name="isFile"><see langword="true"/> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be loaded.</param>
            <returns>
            A list of fully qualified paths to use to load the resource sorted by decreasing importance.
            This list will always reflect the current state in the filesystem and can not be modified! It may be empty.
            </returns>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetInstalledFilePath(System.String)">
            <summary>
            Tries to locate a file either in <see cref="F:NanoByte.Common.Storage.Locations.InstallBase"/>, the location of the NanoByte.Common.dll or in the PATH.
            </summary>
            <param name="fileName">The file name of the file to search for.</param>
            <returns>The fully qualified path of the first located instance of the file.</returns>
            <exception cref="T:System.IO.IOException">The file could not be found.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetCacheDirPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for a cache directory (should not roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <see langword="true"/>.</param>
            <param name="machineWide"><see langword="true"/> if the directory should be machine-wide.</param>
            <param name="resource">The directory name of the resource to be stored.</param>
            <returns>A fully qualified directory path. The directory is guaranteed to already exist.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetIntegrationDirPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for a directory that can safley be used for desktop integration. It ignores <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/>.
            </summary>
            <param name="appName">The name of application. Used as part of the path.</param>
            <param name="machineWide"><see langword="true"/> if the directory should be machine-wide and machine-specific instead of roaming with the user profile.</param>
            <param name="resource">The directory name of the resource to be stored.</param>
            <returns>A fully qualified directory path. The directory is guaranteed to already exist.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
            <remarks>If a new directory is created with <paramref name="machineWide"/> set to <see langword="true"/> on Windows, ACLs are set to deny write access for non-Administrator users.</remarks>
        </member>
        <member name="F:NanoByte.Common.Storage.Locations._secureSharedAcl">
            <summary>
            ACL that gives normal users read and execute access and admins and the the system full access.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.CreateSecureMachineWideDir(System.String)">
            <summary>
            Creates a directory with ACLs that block write-access for regular users.
            </summary>
            <exception cref="T:NanoByte.Common.NotAdminException">A directory does not exist yet and the user is not an administrator.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.LocationsRedirect">
            <summary>
            Disposable class to create a temporary directory where all <see cref="T:NanoByte.Common.Storage.Locations"/> queries are temporarily redirected to.
            Useful for testing. Do not use when multi-threading is involved!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.LocationsRedirect.#ctor(System.String)">
            <summary>
            Creates a uniquely named, empty temporary directory on disk and starts redirecting all <see cref="T:NanoByte.Common.Storage.Locations"/> queries there.
            </summary>
            <param name="prefix">A short string the directory name should start with.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory in <see cref="M:System.IO.Path.GetTempPath"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.MoveDirectory">
            <summary>
            Moves the content of a directory to a new location preserving the original file modification times.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.MoveDirectory.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new directory move task.
            </summary>
            <param name="sourcePath">The path of source directory. Must exist!</param>
            <param name="destinationPath">The path of the target directory. May exist. Must be empty if <paramref name="overwrite"/> is <see langword="false"/>.</param>
            <param name="preserveDirectoryTimestamps"><see langword="true"/> to preserve the modification times for directories as well; <see langword="false"/> to preserve only the file modification times.</param>
            <param name="overwrite">Overwrite exisiting files and directories at the <paramref name="destinationPath"/>. This will even replace read-only files!</param>
        </member>
        <member name="M:NanoByte.Common.Storage.MoveDirectory.CopyFile(System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryDirectory">
            <summary>
            Disposable class to create a temporary directory and delete it again when disposed.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryDirectory.Path">
            <summary>
            The fully qualified path of the temporary directory.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryDirectory.#ctor(System.String)">
            <summary>
            Creates a uniquely named, empty temporary directory on disk.
            </summary>
            <param name="prefix">A short string the directory name should start with.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory in <see cref="M:System.IO.Path.GetTempPath"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryDirectory.Dispose">
            <summary>
            Deletes the temporary directory.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryFile">
            <summary>
            Disposable class to create a temporary file and delete it again when disposed.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryFile.Path">
            <summary>
            The fully qualified path of the temporary file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFile.#ctor(System.String)">
            <summary>
            Creates a uniquely named, empty temporary file on disk.
            </summary>
            <param name="prefix">A short string the directory name should start with.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a file in <see cref="M:System.IO.Path.GetTempPath"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a file in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFile.Dispose">
            <summary>
            Deletes the temporary file.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryFlagFile">
            <summary>
            A temporary directory with a file that may or may not exist to indicate whether a certain condition is true or false.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFlagFile.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryFlagFile.Path">
            <summary>
            The fully qualified path of the flag file.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryFlagFile.Set">
            <summary>
            Indicates or controls whether the file exists.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryWorkingDirectory">
            <summary>
            Like <see cref="T:NanoByte.Common.Storage.TemporaryDirectory"/> but also sets <see cref="P:System.Environment.CurrentDirectory"/> to <see cref="P:NanoByte.Common.Storage.TemporaryDirectory.Path"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryWorkingDirectory.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Storage.XmlNamespaceAttribute">
            <summary>
            Allows you to specify a <see cref="T:System.Xml.XmlQualifiedName"/> (namespace short-name) for <see cref="T:NanoByte.Common.Storage.XmlStorage"/> to use.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.XmlNamespaceAttribute.QualifiedName">
            <summary>
            The <see cref="T:System.Xml.XmlQualifiedName"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlNamespaceAttribute.#ctor(System.String,System.String)">
            <summary>
            Specified a <see cref="T:System.Xml.XmlQualifiedName"/> (namespace short-name) for <see cref="T:NanoByte.Common.Storage.XmlStorage"/> to use.
            </summary>
            <param name="name">The short-name.</param>
            <param name="ns">The full namespace URI.</param>
        </member>
        <member name="T:NanoByte.Common.Storage.XmlStorage">
            <summary>
            Provides easy serialization to XML files (optionally wrapped in ZIP archives).
            </summary>
            <remarks>This class only serializes public properties.</remarks>
        </member>
        <member name="F:NanoByte.Common.Storage.XmlStorage.XsiNamespace">
            <summary>
            The XML namespace used for XML Schema instance.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.LoadXml``1(System.IO.Stream)">
            <summary>
            Loads an object from an XML file.
            </summary>
            <typeparam name="T">The type of object the XML stream shall be converted into.</typeparam>
            <param name="stream">The stream to read the encoded XML data from.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the XML data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.LoadXml``1(System.String)">
            <summary>
            Loads an object from an XML file.
            </summary>
            <typeparam name="T">The type of object the XML stream shall be converted into.</typeparam>
            <param name="path">The path of the file to load.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the XML data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.FromXmlString``1(System.String)">
            <summary>
            Loads an object from an XML string.
            </summary>
            <typeparam name="T">The type of object the XML string shall be converted into.</typeparam>
            <param name="data">The XML string to be parsed.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the XML data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.SaveXml``1(``0,System.IO.Stream,System.String)">
            <summary>
            Saves an object in an XML stream ending with a line break.
            </summary>
            <typeparam name="T">The type of object to be saved in an XML stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="stream">The stream to write the encoded XML data to.</param>
            <param name="stylesheet">The path of an XSL stylesheet for <typeparamref name="T"/>; can be <see langword="null"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.SaveXml``1(``0,System.String,System.String)">
            <summary>
            Saves an object in an XML file ending with a line break.
            </summary>
            <remarks>This method performs an atomic write operation when possible.</remarks>
            <typeparam name="T">The type of object to be saved in an XML stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="path">The path of the file to write.</param>
            <param name="stylesheet">The path of an XSL stylesheet for <typeparamref name="T"/>; can be <see langword="null"/>.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.ToXmlString``1(``0,System.String)">
            <summary>
            Returns an object as an XML string ending with a line break.
            </summary>
            <typeparam name="T">The type of object to be saved in an XML string.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="stylesheet">The path of an XSL stylesheet for <typeparamref name="T"/>; can be <see langword="null"/>.</param>
            <returns>A string containing the XML code.</returns>
        </member>
        <member name="T:NanoByte.Common.Streams.CircularBufferStream">
            <summary>
            A circular buffer represented as a stream that one producer can write to and one consumer can read from simultaneously.
            </summary>
            <remarks>Do not use more than one producer or consumer thread simultaneously!</remarks>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._buffer">
            <summary>The byte array used as a circular buffer storage.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._lock">
            <summary>Synchronization object used to synchronize access across consumer and producer threads.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._dataStart">
            <summary>The index of the first byte currently store in the <see cref="F:NanoByte.Common.Streams.CircularBufferStream._buffer"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._dataLength">
            <summary>The number of bytes currently stored in the <see cref="F:NanoByte.Common.Streams.CircularBufferStream._buffer"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._doneWriting">
            <summary>Indicates that the producer has finished and no new data will be added.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._relayedException">
            <summary>Exceptions sent to <see cref="M:NanoByte.Common.Streams.CircularBufferStream.Read(System.Byte[],System.Int32,System.Int32)"/>ers via <see cref="M:NanoByte.Common.Streams.CircularBufferStream.RelayErrorToReader(System.Exception)"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._dataAvailable">
            <summary>A barrier that blocks threads until new data is available in the <see cref="F:NanoByte.Common.Streams.CircularBufferStream._buffer"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.CircularBufferStream._spaceAvailable">
            <summary>A barrier that blocks threads until empty space is available in the <see cref="F:NanoByte.Common.Streams.CircularBufferStream._buffer"/>.</summary>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.BufferSize">
            <summary>
            The maximum number of bytes the buffer can hold at any time.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.Position">
            <summary>
            Indicates how many bytes have been read from this buffer so far in total.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.PositionWrite">
            <summary>
            Indicates how many bytes have been written to this buffer so far in total.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.Length">
            <summary>
            The estimated number of bytes that will run through this buffer in total; -1 for unknown.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.CircularBufferStream.IsDisposed">
            <summary>
            Indicates that this stream has been closed.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.#ctor(System.Int32)">
            <summary>
            Creates a new circular buffer.
            </summary>
            <param name="bufferSize">The maximum number of bytes the buffer can hold at any time.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.RelayErrorToReader(System.Exception)">
            <summary>
            Throws an exception from within <see cref="M:NanoByte.Common.Streams.CircularBufferStream.Read(System.Byte[],System.Int32,System.Int32)"/>.
            </summary>
            <param name="exception">The exception to throw.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.DoneWriting">
            <summary>
            Signals that no further calls to <see cref="M:NanoByte.Common.Streams.CircularBufferStream.Write(System.Byte[],System.Int32,System.Int32)"/> are intended and any blocked <see cref="M:NanoByte.Common.Streams.CircularBufferStream.Read(System.Byte[],System.Int32,System.Int32)"/> calls should return.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.SetLength(System.Int64)">
            <summary>
            Sets the estimated number of bytes that will run through this buffer in total; -1 for unknown.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.CircularBufferStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.DisposeWarpperStream">
            <summary>
            This wrapper stream passes all operations through to an underlying <see cref="T:System.IO.Stream"/> without modifying them. An additional delegate is executed before <see cref="M:System.IO.Stream.Dispose"/> is passed through.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.#ctor(System.IO.Stream,System.Action)">
            <summary>
            Creates a new dispose wrapper stream.
            </summary>
            <param name="baseStream">The underlying <see cref="T:System.IO.Stream"/> providing the actual data. Will be disposed.</param>
            <param name="disposeHandler">Executed before <paramref name="baseStream"/> is disposed.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DisposeWarpperStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DisposeWarpperStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DisposeWarpperStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DisposeWarpperStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DisposeWarpperStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DisposeWarpperStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.MicroServer">
            <summary>
            Provides a minimalistic HTTP webserver that can provide only a single file. Useful for testing download code.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Streams.MicroServer.MinimumPort">
            <summary>The lowest port the server tries listening on.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.MicroServer.MaxmimumPort">
            <summary>The highest port the server tries listening on.</summary>
        </member>
        <member name="F:NanoByte.Common.Streams.MicroServer._port">
            <summary>A global port counter used to make sure no two instances of the server are listening on the same port.</summary>
        </member>
        <member name="P:NanoByte.Common.Streams.MicroServer.ServerUri">
            <summary>
            The URL under which the server root can be reached. Usually you should use <see cref="P:NanoByte.Common.Streams.MicroServer.FileUri"/> instead.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.MicroServer.FileUri">
            <summary>
            The complete URL under which the server provides its file.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.MicroServer.FileContent">
            <summary>
            The content of the file to be served under <see cref="P:NanoByte.Common.Streams.MicroServer.FileUri"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.MicroServer.Slow">
            <summary>
            Wait for twenty seconds every time before finishing a response.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.MicroServer.#ctor(System.String,System.IO.Stream)">
            <summary>
            Starts a HTTP webserver that listens on a random port.
            </summary>
            <param name="resourceName">The HTTP resource name under which to provide the content.</param>
            <param name="fileContent">The content of the file to serve.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.MicroServer.StartListening">
            <summary>
            Starts listening and returns the URL prefix under which the content is reachable.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.MicroServer.Dispose">
            <summary>
            Stops listening for incoming HTTP connections.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.MicroServer.Listen">
            <summary>
            Waits for HTTP requests and responds to them if they ask for "file".
            </summary>
        </member>
        <member name="T:NanoByte.Common.Streams.OffsetStream">
            <summary>
            This wrapper stream applies a constant byte offset to all access to an underlying stream.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Creates a new offset stream
            </summary>
            <param name="baseStream">Underlying stream for which all access will be offset.</param>
            <param name="offset">Number of bytes to offset the <paramref name="baseStream"/>.</param>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.Close">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.StreamConsumer">
            <summary>
            Continously reads lines from a <see cref="T:System.IO.StreamReader"/> using a background thread while providing them to a foreground thread on demand.
            </summary>
            <remarks>Useful for processing <see cref="P:System.Diagnostics.Process.StandardOutput"/> and <see cref="P:System.Diagnostics.Process.StandardError"/> without risking deadlocks.</remarks>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.#ctor(System.IO.StreamReader)">
            <summary>
            Starts reading from the stream in a background thread.
            </summary>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.ReadLine">
            <summary>
            Returns the next pending line; <see langword="null"/> if there are no pending lines.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.WaitForEnd">
            <summary>
            Waits for <see cref="P:System.IO.StreamReader.EndOfStream"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.ToString">
            <summary>
            Returns all buffered lines that have not been read yet.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Streams.StreamUtils">
            <summary>
            Provides <see cref="T:System.IO.Stream"/>-related helper methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Read(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Reads a fixed number of bytes from a stream starting from the current offset.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="throwOnEnd">Controls whether the method throws an exception when the end of the stream is reached instead of returning <see langword="null"/>.</param>
            <returns>The bytes read from the stream; may be <see langword="null"/> if <paramref name="throwOnEnd"/> is <see langword="false"/>.</returns>
            <exception cref="T:System.IO.IOException">The desired number of bytes could not be read from the stream and <paramref name="throwOnEnd"/> is <see langword="true"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ToArray(System.IO.Stream)">
            <summary>
            Reads the entire content of a stream to an array. Seeks to the beginning of the stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>A entire content of the stream.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ReadToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the entire content of a stream as string data. Seeks to the beginning of the stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="encoding">The encoding of the string; leave <see langword="null"/> to default to <see cref="T:System.Text.UTF8Encoding"/>.</param>
            <returns>A entire content of the stream.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32,NanoByte.Common.Tasks.CancellationToken,NanoByte.Common.Tasks.IProgress{System.Int64})">
            <summary>
            Copies the content of one stream to another. Seeks to the beginning of the <paramref name="source"/> stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="source">The source stream to copy from.</param>
            <param name="destination">The destination stream to copy to.</param>
            <param name="bufferSize">The size of the buffer to use for copying in bytes.</param>
            <param name="cancellationToken">Used to signal when the user wishes to cancel the copy process.</param>
            <param name="progress">Used to report back the number of bytes that have been copied so far.</param>
            <remarks>Will try to <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to the start of <paramref name="source"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.CopyToFile(System.IO.Stream,System.String,System.Int32,NanoByte.Common.Tasks.CancellationToken,NanoByte.Common.Tasks.IProgress{System.Int64})">
            <summary>
            Writes the entire content of a stream to a file.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="path">The path of the file to write.</param>
            <param name="bufferSize">The size of the buffer to use for copying in bytes.</param>
            <param name="cancellationToken">Used to signal when the user wishes to cancel the copy process.</param>
            <param name="progress">Used to report back the number of bytes that have been copied so far. Callbacks are rate limited to once every 250ms.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the entire contents of an array to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="data">The array containing the bytes to write.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ContentEquals(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compares two streams for bit-wise equality. Seeks to the beginnings of the streams if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <remarks>Will try to <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to the start of both streams.</remarks>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ToStream(System.String,System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:System.IO.MemoryStream"/> and fills it with string data.
            </summary>
            <param name="data">The data to fill the stream with.</param>
            <param name="encoding">The encoding of the string; leave <see langword="null"/> to default to <see cref="T:System.Text.UTF8Encoding"/>.</param>
            <returns>A filled stream with the position set to zero.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.GetEmbedded(System.Type,System.String)">
            <summary>
            Returns an embedded resource/file as a stream.
            </summary>
            <param name="type">A type that is stored in the same namespace as the embedded resource.</param>
            <param name="name">The file name of the embedded resource.</param>
            <exception cref="T:System.ArgumentException">The specified embedded resource does not exist.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.GetEmbedded(System.Object,System.String)">
            <summary>
            Returns an embedded resource/file as a stream.
            </summary>
            <param name="reference">An object used as a reference to determine a type that is stored in the same namespace as the embedded resource.</param>
            <param name="name">The file name of the embedded resource.</param>
            <exception cref="T:System.ArgumentException">The specified embedded resource does not exist.</exception>
        </member>
        <member name="T:NanoByte.Common.StringUtils">
            <summary>
            Provides additional or simplified string functions.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Compare strings using case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            Compare chars using case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EqualsEmptyNull(System.String,System.String)">
            <summary>
            Compare strings using case sensitive, invariant culture comparison and considering <see langword="null"/> and <see cref="F:System.String.Empty"/> equal.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Use case-insensitive compare to check for a contained string.
            </summary>
            <param name="value">The string to search.</param>
            <param name="text">The string to search for in <paramref name="value"/>.</param>
        </member>
        <member name="M:NanoByte.Common.StringUtils.ContainsWhitespace(System.String)">
            <summary>
            Checks whether a string contains any whitespace characters
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.CountOccurences(System.String,System.Char)">
            <summary>
            Counts how many times a character occurs within a string.
            </summary>
            <param name="value">The string to search within.</param>
            <param name="token">The character to search for.</param>
            <returns>The number of occurences of <paramref name="token"/> wihin <paramref name="value"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.StringUtils.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether the beginning of this string matches a specific value case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether the end of this string matches a specific value case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.StripCharacters(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Removes all occurences of a specific set of characters from a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.StripFromEnd(System.String,System.Int32)">
            <summary>
            Returns a string with <paramref name="count"/> characters removed from the end.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.SplitMultilineText(System.String)">
            <summary>
            Splits a multiline string to several strings and returns the result as a string array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines multiple strings into one, placing a <paramref name="separator"/> between the <paramref name="parts"/>.
            </summary>
            <param name="separator">The separator characters to place between the <paramref name="parts"/>.</param>
            <param name="parts">The strings to be combined.</param>
            <remarks>Works like <see cref="M:System.String.Join(System.String,System.String[])"/> but for <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</remarks>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtFirstOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the left of the first occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtFirstOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the right of the first occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtLastOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the left of the last occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtLastOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the right of the last occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtFirstOccurrence(System.String,System.String)">
            <summary>
            Get everything to the left of the first occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtFirstOccurrence(System.String,System.String)">
            <summary>
            Get everything to the right of the first occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtLastOccurrence(System.String,System.String)">
            <summary>
            Get everything to the left of the last occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtLastOccurrence(System.String,System.String)">
            <summary>
            Get everything to the right of the last occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EscapeArgument(System.String)">
            <summary>
            Escapes a string for use as a Windows command-line argument, making sure it is encapsulated within <code>"</code> if it contains whitespace characters.
            </summary>
            <remarks>
            This coressponds to Windows' handling of command-line arguments as specified in:
            http://msdn.microsoft.com/library/17w5ykft
            </remarks>
        </member>
        <member name="M:NanoByte.Common.StringUtils.JoinEscapeArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines multiple strings into one for use as a Windows command-line argument using <see cref="M:NanoByte.Common.StringUtils.EscapeArgument(System.String)"/>.
            </summary>
            <param name="parts">The strings to be combined.</param>
            <remarks>
            This coressponds to Windows' handling of command-line arguments as specified in:
            http://msdn.microsoft.com/library/17w5ykft
            </remarks>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Base64Utf8Encode(System.String)">
            <summary>
            Encodes a string as UTF-8 in base64.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Base64Utf8Decode(System.String)">
            <summary>
            Decodes a UTF-8 in base64 string.
            </summary>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not a valid base 64 string.</exception>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Base32Encode(System.Byte[])">
            <summary>
            Encodes a byte array in base32 without padding.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Base16Encode(System.Byte[])">
            <summary>
            Encodes a byte array in base16 (hexadecimal).
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Base16Decode(System.String)">
            <summary>
            Decodes a base16 (hexadecimal) to a byte array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Hash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash value of a string encoded as UTF-8.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="algorithm">The hashing algorithm to use.</param>
            <returns>A hexadecimal string representation of the hash value.</returns>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GeneratePassword(System.Int32)">
            <summary>
            Returns a string filled with random human-readable ASCII characters based on a cryptographic random number generator.
            </summary>
            <param name="length">The length of the string to be generated.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.CancellationToken">
            <summary>
            Propagates notification that operations should be canceled.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationToken.#ctor(NanoByte.Common.Tasks.CancellationTokenSource)">
            <summary>
            Creates a new token controlled by a specific <see cref="T:NanoByte.Common.Tasks.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationToken.Register(System.Action)">
            <summary>
            Registers a delegate that will be called when cancellation has been requested.
            </summary>
            <param name="callback">The delegate to be executed when cancellation has been requested.</param>
            <returns>A handle that can be used to deregister the callback.</returns>
            <remarks>
            The callback is called from a background thread. Wrap via synchronization context to update UI elements.
            Handling this blocks the task, therefore observers should handle the event quickly.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Tasks.CancellationToken.IsCancellationRequested">
            <summary>
            Indicates whether cancellation has been requested.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationToken.ThrowIfCancellationRequested">
            <summary>
            Throws an <see cref="T:System.OperationCanceledException"/> if cancellation has been requested.
            </summary>
            <exception cref="T:System.OperationCanceledException">Cancellation has been requested.</exception>
        </member>
        <member name="P:NanoByte.Common.Tasks.CancellationToken.WaitHandle">
            <summary>
            Gets a wait handle that is signaled when cancellation has been requested.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationToken.ToString">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.CancellationTokenRegistration">
            <summary>
            Represents a callback delegate that has been registered with a <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationTokenRegistration.Dispose">
            <summary>
            Unregisters the callback.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.CancellationTokenSource">
            <summary>
            Signals to <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>s that they should be canceled.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.CancellationTokenSource.Token">
            <summary>
            Gets a <see cref="T:NanoByte.Common.Tasks.CancellationToken"/> associated with this <see cref="T:NanoByte.Common.Tasks.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Tasks.CancellationTokenSource.CancellationRequested">
            <summary>
            Raised the first time <see cref="M:NanoByte.Common.Tasks.CancellationTokenSource.Cancel"/> is called. Subsequent calls will not raise this event again.
            </summary>
            <remarks>
            The event is raised from a background thread. Wrap via synchronization context to update UI elements.
            Handling this blocks the task, therefore observers should handle the event quickly.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Tasks.CancellationTokenSource.IsCancellationRequested">
            <summary>
            Indicates whether <see cref="M:NanoByte.Common.Tasks.CancellationTokenSource.Cancel"/> has been called.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.CancellationTokenSource.WaitHandle">
            <summary>
            Gets a wait handle that is signaled when see cref="Cancel"/> has been called.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationTokenSource.Cancel">
            <summary>
            Notifies all listening <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>s that operations should be canceled.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationTokenSource.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CancellationTokenSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.CliTaskHandler">
            <summary>
            Uses the stderr stream to inform the user about the progress of tasks.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.#ctor">
            <summary>
            Sets up Ctrl+C handling and console <see cref="T:NanoByte.Common.Log"/> output.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.CancelKeyPressHandler(System.Object,System.ConsoleCancelEventArgs)">
            <summary>
            Handles Ctrl+C key presses.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.LogHandler(NanoByte.Common.LogSeverity,System.String)">
            <summary>
            Prints <see cref="T:NanoByte.Common.Log"/> messages to the <see cref="T:System.Console"/> based on their <see cref="T:NanoByte.Common.LogSeverity"/> and the current <see cref="T:NanoByte.Common.Tasks.Verbosity"/> level.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message text of the entry.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.BuildCrendentialProvider">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.RunTask(NanoByte.Common.Tasks.ITask)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Ask(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Output(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskHandlerBase">
            <summary>
            Common base class for <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/> implementations.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.#ctor">
            <summary>
            Starts handling log events.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.LogHandler(NanoByte.Common.LogSeverity,System.String)">
            <summary>
            Reports <see cref="T:NanoByte.Common.Log"/> messages to the user based on their <see cref="T:NanoByte.Common.LogSeverity"/> and the current <see cref="P:NanoByte.Common.Tasks.TaskHandlerBase.Verbosity"/> level.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message text of the entry.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Dispose(System.Boolean)">
            <summary>
            Stops handling log events.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskHandlerBase.CancellationTokenSource">
            <summary>
            Used to signal the <see cref="P:NanoByte.Common.Tasks.TaskHandlerBase.CancellationToken"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.CredentialProvider">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.BuildCrendentialProvider">
            <summary>
            Template method for building an <see cref="T:NanoByte.Common.Net.ICredentialProvider"/>. Called on first use of <see cref="P:NanoByte.Common.Tasks.TaskHandlerBase.CredentialProvider"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.Verbosity">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.RunTask(NanoByte.Common.Tasks.ITask)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Ask(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Output(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.ForEachTask`1">
            <summary>
            A task that performs an operation once for each element of a collection.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.ForEachTask`1._target">
            <summary>A list of objects to execute work for. Cancellation is possible between two elements.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.ForEachTask`1._work">
            <summary>The code to be executed once per element in <see cref="F:NanoByte.Common.Tasks.ForEachTask`1._target"/>. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ForEachTask`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ForEachTask`1.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.ForEachTask`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Action{`0})">
            <summary>
            Creates a new for-each task.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="target">A list of objects to execute work for. Cancellation is possible between two elements.</param>
            <param name="work">The code to be executed once per element in <paramref name="target"/>. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.ForEachTask`1.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.IProgress`1">
            <summary>
            Defines a provider for progress updates.
            </summary>
            <remarks>Implementations should derive from <see cref="T:System.MarshalByRefObject"/>.</remarks>
            <typeparam name="T">The type of progress update value.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Tasks.IProgress`1.Report(`0)">
            <summary>
            Reports a progress update.
            </summary>
            <param name="value">The value of the updated progress.</param>
            <remarks>May be called from background/worker threads. Callee must perform thread marshaling as needed.</remarks>
        </member>
        <member name="T:NanoByte.Common.Tasks.ITask">
            <summary>
            Represents an operation that can be cancelled and have its progress tracked.
            </summary>
            <remarks>
            Unlike System.Threading.Tasks.Task, these tasks do not provide any asynchrony by themselves.
            They execute all their code on the same thread they are started on and rely on <seealso cref="T:NanoByte.Common.Tasks.ITaskHandler"/>s for scheduling on background threads.
            </remarks>
            <seealso cref="T:NanoByte.Common.Tasks.ITaskHandler"/>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITask.Run(NanoByte.Common.Tasks.CancellationToken,NanoByte.Common.Net.ICredentialProvider,NanoByte.Common.Tasks.IProgress{NanoByte.Common.Tasks.TaskSnapshot})">
            <summary>
            Runs the task and blocks until it is complete.
            </summary>
            <param name="cancellationToken">Used to receive a signal (e.g. from another thread) when the user wishes to cancel the task execution.</param>
            <param name="credentialProvider">Object used to retrieve credentials for specific <see cref="T:System.Uri"/>s on demand; can be <see langword="null"/>.</param>
            <param name="progress">Used to report back the task's progress (e.g. to another thread).</param>
            <exception cref="T:System.OperationCanceledException">The task was canceled from another thread.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
            <seealso cref="M:NanoByte.Common.Tasks.ITaskHandler.RunTask(NanoByte.Common.Tasks.ITask)"/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITask.Name">
            <summary>
            A name describing the task in human-readable form.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITask.Tag">
            <summary>
            An object used to associate the task with a specific process; can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITask.CanCancel">
            <summary>
            Indicates whether this task can be canceled once it has been started.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.ITaskHandler">
            <summary>
            Used to execute and track <seealso cref="T:NanoByte.Common.Tasks.ITask"/>s and ask the user questions. Specific implementations provide different kinds of user interfaces.
            </summary>
            <remarks>
            The methods may be called from a background thread. Implementations need to apply appropriate thread-synchronization to update UI elements.
            Implementations should derive from <see cref="T:NanoByte.Common.MarshalNoTimeout"/>.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITaskHandler.CancellationToken">
            <summary>
            Used to signal when the user wishes to cancel the entire current process (and any <see cref="T:NanoByte.Common.Tasks.ITask"/>s it includes).
            </summary>
            <remarks>Once this has been signalled this <seealso cref="T:NanoByte.Common.Tasks.ITaskHandler"/> cannot be reused, since any subsequently started <seealso cref="T:NanoByte.Common.Tasks.ITask"/>s will be cancelled immediatley.</remarks>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITaskHandler.CredentialProvider">
            <summary>
            Used to ask the user or a keyring for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s; can be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.RunTask(NanoByte.Common.Tasks.ITask)">
            <summary>
            Runs an <see cref="T:NanoByte.Common.Tasks.ITask"/> and tracks its progress. Returns once the task has been completed. The task may be executed on a different thread.
            </summary>
            <param name="task">The task to be run. (<see cref="M:NanoByte.Common.Tasks.ITask.Run(NanoByte.Common.Tasks.CancellationToken,NanoByte.Common.Net.ICredentialProvider,NanoByte.Common.Tasks.IProgress{NanoByte.Common.Tasks.TaskSnapshot})"/> or equivalent is called on it.)</param>
            <exception cref="T:System.OperationCanceledException">The user canceled the task.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
            <remarks>
            This may be called multiple times concurrently but concurrent calls must not depend on each other.
            The specific implementation of this method determines whether the tasks actually run concurrently or in sequence.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity">
            <summary>
            The detail level of messages displayed to the user.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Ask(System.String)">
            <summary>
            Asks the user a Yes/No/Cancel question.
            </summary>
            <param name="question">The question and comprehensive information to help the user make an informed decision.</param>
            <returns><see langword="true"/> if the user answered with 'Yes'; <see langword="false"/> if the user answered with 'No'.</returns>
            <exception cref="T:System.OperationCanceledException">The user selected 'Cancel'.</exception>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Output(System.String,System.String)">
            <summary>
            Displays multi-line text to the user.
            </summary>
            <param name="title">A title for the message. Will only be displayed in GUIs, not on the console. Must not contain critical information!</param>
            <param name="message">The string to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Displays tabular data to the user.
            </summary>
            <param name="title">A title for the data. Will only be displayed in GUIs, not on the console. Must not contain critical information!</param>
            <param name="data">The data to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Error(System.Exception)">
            <summary>
            Displays an error message to the user.
            </summary>
            <param name="exception">The exception representing the error that occurred.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.Progress`1">
            <summary>
            Reports progress updates using callbacks/events. Performs the callbacks using the synchronization context of the original caller.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Tasks.Progress`1.ProgressChanged">
            <summary>
            Raised for each reported progress value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.Progress`1.#ctor(System.Action{`0})">
            <summary>
            Captures the current synchronization context for callbacks.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.SilentTaskHandler">
            <summary>
            Ignores progress reports.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.SilentTaskHandler.CancellationTokenSource">
            <summary>
            Used to signal the <see cref="P:NanoByte.Common.Tasks.SilentTaskHandler.CancellationToken"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.SilentTaskHandler.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.SilentTaskHandler.CredentialProvider">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.RunTask(NanoByte.Common.Tasks.ITask)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.SilentTaskHandler.Verbosity">
            <summary>
            Always returns <seealso cref="F:NanoByte.Common.Tasks.Verbosity.Batch"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Ask(System.String)">
            <summary>
            Always returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Output(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.PercentProgressCallback">
            <summary>
            A callback to be called by a workload to report its progress in percent.
            </summary>
            <param name="percent">The workload's progress in percent.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.SimplePercentTask">
            <summary>
            A delegate-driven task. Progress is reported in percent.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.SimplePercentTask.Name">
            <inheritdoc/>
        </member>
        <member name="F:NanoByte.Common.Tasks.SimplePercentTask._work">
            <summary>The code to be executed by the task. Is given a callback to report progress in percent. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.SimplePercentTask._cancelationCallback">
            <summary>A callback to be called when cancellation is requested via a <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.SimplePercentTask.CanCancel">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.SimplePercentTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SimplePercentTask.#ctor(System.String,System.Action{NanoByte.Common.Tasks.PercentProgressCallback},System.Action)">
            <summary>
            Creates a new simple task.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task. Is given a callback to report progress in percent. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">A callback to be called when cancellation is requested via a <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.SimplePercentTask.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.SimpleTask">
            <summary>
            A delegate-driven task. Only completion is reported, no intermediate progress.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.SimpleTask.Name">
            <inheritdoc/>
        </member>
        <member name="F:NanoByte.Common.Tasks.SimpleTask._work">
            <summary>The code to be executed by the task. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.SimpleTask._cancelationCallback">
            <summary>A callback to be called when cancellation is requested via a <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.SimpleTask.CanCancel">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.SimpleTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SimpleTask.#ctor(System.String,System.Action,System.Action)">
            <summary>
            Creates a new simple task.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">A callback to be called when cancellation is requested via a <see cref="T:NanoByte.Common.Tasks.CancellationToken"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.SimpleTask.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.SynchronousProgress`1">
            <summary>
            Reports progress updates using callbacks/events. Performs the callbacks immediately on the same thread.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Tasks.SynchronousProgress`1.ProgressChanged">
            <summary>
            Raised for each reported progress value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.SynchronousProgress`1.#ctor(System.Action{`0})">
            <summary>
            Captures the current synchronization context for callbacks.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskBase">
            <summary>
            Abstract base class for <see cref="T:NanoByte.Common.Tasks.ITask"/> implementations.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.Tag">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.CanCancel">
            <inheritdoc/>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase._originalIdentity">
            <summary>The identity of the user that originally created this task.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase.CancellationToken">
            <summary>Signaled when the user wishes to cancel the task execution.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase._progress">
            <summary>Used to report back the task's progress.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase.CredentialProvider">
            <summary>Used to retrieve credentials for specific <see cref="T:System.Uri"/>s on demand; can be <see langword="null"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.Run(NanoByte.Common.Tasks.CancellationToken,NanoByte.Common.Net.ICredentialProvider,NanoByte.Common.Tasks.IProgress{NanoByte.Common.Tasks.TaskSnapshot})">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.State">
            <summary>The current State of the task.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.UnitsByte">
            <summary>
            <see langword="true"/> if <see cref="P:NanoByte.Common.Tasks.TaskBase.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskBase.UnitsTotal"/> are measured in bytes;
            <see langword="false"/> if they are measured in generic units.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.UnitsProcessed">
            <summary>The number of units that have been processed so far.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.UnitsTotal">
            <summary>The total number of units that are to be processed; -1 for unknown.</summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.OnProgressChanged">
            <summary>
            Informs the caller of the current progress, if a callback was registered.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.OnProgressChangedThrottled">
            <summary>
            Informs the caller of the current progress, if a callback was registered. Limits the rate of progress updates.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.Execute">
            <summary>
            The actual code to be executed.
            </summary>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskHandlerExtensions">
            <summary>
            Contains extension methods for <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.OutputLow(NanoByte.Common.Tasks.ITaskHandler,System.String,System.String)">
            <summary>
            Displays multi-line text to the user only when <see cref="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity"/> is <seealso cref="F:NanoByte.Common.Tasks.Verbosity.Normal"/> or higher.
            </summary>
            <param name="handler">Used for the underlying <see cref="M:NanoByte.Common.Tasks.ITaskHandler.Output(System.String,System.String)"/>.</param>
            <param name="title">A title for the message. Will only be displayed in GUIs, not on the console. Must not contain critical information!</param>
            <param name="message">The string to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.OutputLow``1(NanoByte.Common.Tasks.ITaskHandler,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Displays tabular data to the user only when <see cref="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity"/> is <seealso cref="F:NanoByte.Common.Tasks.Verbosity.Normal"/> or higher.
            </summary>
            <param name="handler">Used for the underlying <see cref="M:NanoByte.Common.Tasks.ITaskHandler.Output(System.String,System.String)"/>.</param>
            <param name="title">A title for the message. Will only be displayed in GUIs, not on the console. Must not contain critical information!</param>
            <param name="data">The data to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.Ask(NanoByte.Common.Tasks.ITaskHandler,System.String,System.Boolean,System.String)">
            <summary>
            Asks the user a Yes/No/Cancel question.
            </summary>
            <param name="handler">Used for the underlying <see cref="M:NanoByte.Common.Tasks.ITaskHandler.Ask(System.String)"/>.</param>
            <param name="question">The question and comprehensive information to help the user make an informed decision.</param>
            <param name="defaultAnswer">The answer to automatically use when <see cref="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity"/> is <seealso cref="F:NanoByte.Common.Tasks.Verbosity.Batch"/> or lower.</param>
            <param name="alternateMessage">A message to output with <see cref="M:NanoByte.Common.Log.Warn(System.String)"/> when the <paramref name="defaultAnswer"/> is used instead of asking the user.</param>
            <returns><see langword="true"/> if the user answered with 'Yes'; <see langword="false"/> if the user answered with 'No'.</returns>
            <exception cref="T:System.OperationCanceledException">The user selected 'Cancel'.</exception>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskSnapshot">
            <summary>
            Represents a progress snapshot of an <see cref="T:NanoByte.Common.Tasks.ITask"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.State">
            <summary>
            The current State of the task.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsByte">
            <summary>
            <see langword="true"/> if <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal"/> are measured in bytes;
            <see langword="false"/> if they are measured in generic units.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed">
            <summary>
            The number of units that have been processed so far.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal">
            <summary>
            The total number of units that are to be processed; -1 for unknown.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskSnapshot.#ctor(NanoByte.Common.Tasks.TaskState,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Create a new progress snapshot.
            </summary>
            <param name="state">The current State of the task.</param>
            <param name="unitsByte"><see langword="true"/> if <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal"/> are measured in bytes; <see langword="false"/> if they are measured in generic units.</param>
            <param name="unitsProcessed">The number of units that have been processed so far.</param>
            <param name="unitsTotal">The total number of units that are to be processed; -1 for unknown.</param>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.Value">
            <summary>
            The progress of the task as a value between 0 and 1; -1 when unknown.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskSnapshot.ToString">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskState">
            <summary>
            Represents different states a (usually Web- or IO-related) task can be in.
            </summary>
            <seealso cref="P:NanoByte.Common.Tasks.TaskSnapshot.State"/>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Ready">
            <summary>The task is ready to begin.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Started">
            <summary>The task has just been started.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Header">
            <summary>Handling the header.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Data">
            <summary>Handling the actual data.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Complete">
            <summary>The task has been completed successfully.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.WebError">
            <summary>An error occurred during the task.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.IOError">
            <summary>An error occurred while writing the file.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Canceled">
            <summary>The task was canceled by the user before completion.</summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.Verbosity">
            <seealso cref="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity"/>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Batch">
            <summary>Print no progress bars on command-line. Automatically answer questions with defaults when possible.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Normal">
            <summary>Normal interactive operation.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Verbose">
            <summary>Display additional information for troubleshooting.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Debug">
            <summary>Display detailed information for debugging.</summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.WaitTask">
            <summary>
            Waits for a <see cref="T:System.Threading.WaitHandle"/> to become available.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.WaitTask._waitHandle">
            <summary>The <see cref="T:System.Threading.WaitHandle"/> to wait for.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.WaitTask._millisecondsTimeout">
            <summary>The number of milliseconds to wait before rasing <see cref="T:System.TimeoutException"/>; <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.WaitTask.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.WaitTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.WaitTask.#ctor(System.String,System.Threading.WaitHandle,System.Int32)">
            <summary>
            Creates a new handle-waiting task.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="waitHandle">>The <see cref="T:System.Threading.WaitHandle"/> to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait before rasing <see cref="T:System.TimeoutException"/>; <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.WaitTask.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.ThreadUtils">
            <summary>
            Provides helper methods for launching <see cref="T:System.Threading.Thread"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ThreadUtils.StartAsync(System.Threading.ThreadStart,System.String)">
            <summary>
            Starts executing a delegate in a new thread suitable for WinForms.
            </summary>
            <param name="execute">The delegate to execute.</param>
            <param name="name">A short name for the new thread; can be <see langword="null"/>.</param>
            <returns>The newly launched thread.</returns>
        </member>
        <member name="M:NanoByte.Common.ThreadUtils.StartBackground(System.Threading.ThreadStart,System.String)">
            <summary>
            Starts executing a delegate in a new background thread (automatically terminated when application exits).
            </summary>
            <param name="execute">The delegate to execute.</param>
            <param name="name">A short name for the new thread; can be <see langword="null"/>.</param>
            <returns>The newly launched thread.</returns>
        </member>
        <member name="M:NanoByte.Common.ThreadUtils.RunSta(System.Action)">
            <summary>
            Executes a delegate in a new <see cref="F:System.Threading.ApartmentState.STA"/> thread. Blocks the caller until the execution completes.
            </summary>
            <param name="execute">The delegate to execute.</param>
            <remarks>This is useful for code that needs to be executed in a Single-Threaded Apartment (e.g. WinForms code) when the calling thread is not set up to handle COM.</remarks>
        </member>
        <member name="M:NanoByte.Common.ThreadUtils.RunSta``1(System.Func{``0})">
            <summary>
            Executes a delegate in a new <see cref="F:System.Threading.ApartmentState.STA"/> thread. Blocks the caller until the execution completes.
            </summary>
            <typeparam name="T">The type of the return value of <paramref name="execute"/>.</typeparam>
            <param name="execute">The delegate to execute.</param>
            <returns>The return value of <paramref name="execute"/></returns>
            <remarks>This is useful for code that needs to be executed in a Single-Threaded Apartment (e.g. WinForms code) when the calling thread is not set up to handle COM.</remarks>
        </member>
        <member name="T:NanoByte.Common.TimedLogEvent">
            <summary>
            Structure that allows you to log timed execution blocks.
            </summary>
            <example>
              <code>using(new LogEvent("Message")) {}</code>
            </example>
        </member>
        <member name="M:NanoByte.Common.TimedLogEvent.#ctor(System.String)">
            <summary>
            Starts a new log event.
            </summary>
            <param name="entry">The entry for the log file. Elapsed time will automatically be appended.</param>
        </member>
        <member name="M:NanoByte.Common.TimedLogEvent.Dispose">
            <summary>
            Ends the log event.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.AddToCollection`1">
            <summary>
            An undo command that adds an element to a collection.
            </summary>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            Creates a new add to collection command.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added to <paramref name="collection"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection`1.OnExecute">
            <summary>
            Adds the element to the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection`1.OnUndo">
            <summary>
            Removes the element from the collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.CollectionCommand`1">
            <summary>
            An undo command that adds or removes an element from a collection.
            </summary>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="F:NanoByte.Common.Undo.CollectionCommand`1.Collection">
            <summary>
            The collection to be modified.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Undo.CollectionCommand`1.Element">
            <summary>
            The element to be added or removed from <see cref="F:NanoByte.Common.Undo.CollectionCommand`1.Collection"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CollectionCommand`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CollectionCommand`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            Creates a new collection command.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added or removed from <paramref name="collection"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Undo.CommandCollector">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s and collects them into a <see cref="T:NanoByte.Common.Undo.CompositeCommand"/> allowing a combined undo later on.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandCollector.Path">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandCollector.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <summary>
            Store an <see cref="T:NanoByte.Common.Undo.IUndoCommand"/> for later execution.
            </summary>
            <param name="command">The command to be stored.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandCollector.BuildComposite">
            <summary>
            Creates a new <see cref="T:NanoByte.Common.Undo.CompositeCommand"/> containing all <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s collected so far.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.CommandManager`1">
            <summary>
            Controls editing a target using <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s.
            </summary>
            <typeparam name="T">The type of the root object being edited.</typeparam>
        </member>
        <member name="F:NanoByte.Common.Undo.CommandManager`1.UndoStack">
            <summary>Entries used by the undo-system to undo changes</summary>
        </member>
        <member name="F:NanoByte.Common.Undo.CommandManager`1.RedoStack">
            <summary>Entries used by the undo-system to redo changes previously undone</summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.Target">
            <summary>
            The root object being edited.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.Path">
            <summary>
            The path of the file the <see cref="P:NanoByte.Common.Undo.CommandManager`1.Target"/> was loaded from. <see langword="null"/> if none.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.Changed">
            <summary>
            Indicates whether the <see cref="P:NanoByte.Common.Undo.CommandManager`1.Target"/> has unsaved changes.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.UndoEnabled">
            <summary>
            Indicates whether <see cref="M:NanoByte.Common.Undo.CommandManager`1.Undo"/> can presently be called.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.RedoEnabled">
            <summary>
            Indicates whether <see cref="M:NanoByte.Common.Undo.CommandManager`1.Redo"/> can presently be called.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Undo.CommandManager`1.Updated">
            <summary>
            Is raised after an <see cref="T:NanoByte.Common.Undo.IUndoCommand"/> has been executed.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Undo.CommandManager`1.UndoEnabledChanged">
            <summary>
            Is raised when the value of <see cref="P:NanoByte.Common.Undo.CommandManager`1.UndoEnabled"/> has changed.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Undo.CommandManager`1.RedoEnabledChanged">
            <summary>
            Is raised when the value of <see cref="P:NanoByte.Common.Undo.CommandManager`1.RedoEnabled"/> has changed.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Undo">
            <summary>
            Undoes the last action performed by <see cref="M:NanoByte.Common.Undo.CommandManager`1.Execute(NanoByte.Common.Undo.IUndoCommand)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Redo">
            <summary>
            Redoes the last action undone by <see cref="M:NanoByte.Common.Undo.CommandManager`1.Undo"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Reset">
            <summary>
            Resets the entire undo system, clearing all stacks.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.CompositeCommand">
            <summary>
            Combines multiple <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s into a single atomic transaction.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CompositeCommand.#ctor(NanoByte.Common.Undo.IUndoCommand[])">
            <summary>
            Creates a new composite command.
            </summary>
            <param name="commands">The commands to be contained inside the transaction.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.CompositeCommand.OnExecute">
            <summary>
            Executes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in order.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CompositeCommand.OnUndo">
            <summary>
            Undoes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in reverse order.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.FirstExecuteCommand">
            <summary>
            An undo command that does something different on the first call to <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.Execute"/> than on subsequent redo calls.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.Execute">
            <summary>
            Performs the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.OnFirstExecute">
            <summary>
            Hook to perform the desired action the first time.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.OnRedo">
            <summary>
            Hook to perform the desired action again.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.Undo">
            <summary>
            Undoes the changes made by <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.Execute"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.OnUndo">
            <summary>
            Hook to undo the changes made by <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.OnFirstExecute"/> or <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.OnRedo"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.ICommandExecutor">
            <summary>
            An object that can execute <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.ICommandExecutor.Path">
            <summary>
            The path of the file the data structure being modified was loaded from. <see langword="null"/> if none.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ICommandExecutor.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <summary>
            Executes an <see cref="T:NanoByte.Common.Undo.IUndoCommand"/> and stores it for later undo-operations.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="T:NanoByte.Common.Undo.IUndoCommand">
            <summary>
            A executable command with an undo function.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.IUndoCommand.Execute">
            <summary>
            Performs the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.IUndoCommand.Undo">
            <summary>
            Undoes changes made by <see cref="M:NanoByte.Common.Undo.IUndoCommand.Execute"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.IValueCommand">
            <summary>
            A command that exposes the value it will set.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.PreExecutedCommand">
            <summary>
            An undo command that does nothing on the first <see cref="M:NanoByte.Common.Undo.IUndoCommand.Execute"/> call, because the action was already performed beforehand
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCommand.OnFirstExecute">
            <summary>
            Do nothing on first execute.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.PreExecutedCompositeCommand">
            <summary>
            Combines multiple already executed <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s into a single atomic transaction.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCompositeCommand.#ctor(System.Collections.Generic.IEnumerable{NanoByte.Common.Undo.IUndoCommand})">
            <summary>
            Creates a new composite command.
            </summary>
            <param name="commands">The commands to be contained inside the transaction.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCompositeCommand.OnRedo">
            <summary>
            Executes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in order.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCompositeCommand.OnUndo">
            <summary>
            Undoes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in reverse order.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.RemoveFromCollection`1">
            <summary>
            An undo command that removes an element from a collection.
            </summary>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            Creates a new remove from collection command.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be removed from <paramref name="collection"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection`1.OnExecute">
            <summary>
            Removes the element from the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection`1.OnUndo">
            <summary>
            Adds the element to the collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.ReplaceInList`1">
            <summary>
            An undo command that replaces an element in a list with a new one.
            </summary>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.ReplaceInList`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.ReplaceInList`1.#ctor(System.Collections.Generic.IList{`0},`0,`0)">
            <summary>
            Creates a new replace in list command.
            </summary>
            <param name="list">The collection to be modified.</param>
            <param name="oldElement">The element to be removed from <paramref name="list"/>.</param>
            <param name="newElement">The element to be added to <paramref name="list"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Undo.SetInList`1">
            <summary>
            Replaces an entry in a <see cref="T:System.Collections.Generic.IList`1"/> with a new one.
            </summary>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.SetInList`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList`1.#ctor(System.Collections.Generic.IList{`0},`0,`0)">
            <summary>
            Creates a new set in list command.
            </summary>
            <param name="list">The list to be modified.</param>
            <param name="oldElement">The old element currently in the <paramref name="list"/> to be replaced.</param>
            <param name="newElement">The new element to take the place of <paramref name="oldElement"/> in the <paramref name="list"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList`1.OnExecute">
            <summary>
            Sets the new entry in the list.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList`1.OnUndo">
            <summary>
            Restores the old entry in the list.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SetLocalizableString">
            <summary>
            An undo command that sets a <see cref="T:NanoByte.Common.Collections.LocalizableString"/> in a <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Undo.SetLocalizableString._collection">
            <summary>
            The collection to be modified.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Undo.SetLocalizableString._entry">
            <summary>
            The element to be added or removed from <see cref="F:NanoByte.Common.Undo.SetLocalizableString._collection"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetLocalizableString.#ctor(NanoByte.Common.Collections.LocalizableStringCollection,NanoByte.Common.Collections.LocalizableString)">
            <summary>
            Creates a new localizable string command.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The entry to be set in the <paramref name="collection"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.SetLocalizableString.OnExecute">
            <summary>
            Sets the entry in the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetLocalizableString.OnUndo">
            <summary>
            Restores the original entry in the collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SetValueCommand`1">
            <summary>
            An undo command that uses a delegates for getting and setting values from a backing model.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.SetValueCommand`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.#ctor(NanoByte.Common.PropertyPointer{`0},`0)">
            <summary>
            Creates a new value-setting command.
            </summary>
            <param name="pointer">The object controlling how to read/write the value to be modified.</param>
            <param name="newValue">The new value to be set.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.#ctor(System.Func{`0},System.Action{`0},`0)">
            <summary>
            Creates a new value-setting command.
            </summary>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the valuel.</param>
            <param name="newValue">The new value to be set.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.OnExecute">
            <summary>
            Sets the new value in the model.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.OnUndo">
            <summary>
            Restores the old value in the model.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SimpleCommand">
            <summary>
            An undo command that automatically tracks when <see cref="M:NanoByte.Common.Undo.SimpleCommand.Execute"/> and <see cref="M:NanoByte.Common.Undo.SimpleCommand.Undo"/> can be called.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.Execute">
            <summary>
            Performs the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.OnExecute">
            <summary>
            Hook to perform the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.Undo">
            <summary>
            Undoes the changes made by <see cref="M:NanoByte.Common.Undo.SimpleCommand.Execute"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.OnUndo">
            <summary>
            Hook to undo the changes made by <see cref="M:NanoByte.Common.Undo.SimpleCommand.OnExecute"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SimpleCommandExecutor">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s without any additional handling.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.SimpleCommandExecutor.Path">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommandExecutor.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <intheritdoc/>
        </member>
        <member name="T:NanoByte.Common.UpdateUtils">
            <summary>
            Provides neat little code-shortcuts for updating properties.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``1(``0,``0@,System.Boolean@)">
            <summary>
            Updates a value and sets a boolean flag to <see langword="true"/> if the original value actually changed.
            </summary>
            <typeparam name="T">The type of data to update.</typeparam>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated">Gets set to <see langword="true"/> if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``1(``0,``0@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates a value and sets two boolean flags to <see langword="true"/> if the original value actually changed.
            </summary>
            <typeparam name="T">The type of data to update.</typeparam>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated1">Gets set to <see langword="true"/> if value is different from original.</param>
            <param name="updated2">Gets set to <see langword="true"/> if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To(System.String,System.String@,System.Boolean@)">
            <summary>
            Updates a value and sets a boolean flag to <see langword="true"/> if the original value actually changed
            </summary>
            <param name="value">The new value</param>
            <param name="original">The original value to update</param>
            <param name="updated">Gets set to <see langword="true"/> if value is different from original</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To(System.String,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates a value and sets two boolean flags to <see langword="true"/> if the original value actually changed
            </summary>
            <param name="value">The new value</param>
            <param name="original">The original value to update</param>
            <param name="updated1">Gets set to <see langword="true"/> if value is different from original</param>
            <param name="updated2">Gets set to <see langword="true"/> if value is different from original</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``1(``0,``0@,System.Action)">
            <summary>
            Updates a value and calls back a delegate if the original value actually changed.
            </summary>
            <typeparam name="T">The type of data to update.</typeparam>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated">Gets called if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To(System.String,System.String@,System.Action)">
            <summary>
            Updates a value and calls back a delegate if the original value actually changed.
            </summary>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated">Gets called if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.Swap``1(``0@,``0@)">
            <summary>
            Swaps the content of two fields.
            </summary>
            <typeparam name="T">The type of objects to swap.</typeparam>
            <param name="value1">The first field which will afterwards carry the content of <paramref name="value2"/>.</param>
            <param name="value2">The first field which will afterwards carry the content of <paramref name="value1"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Values.AttributeUtils">
            <summary>
            Provides helper methods for <see cref="T:System.Attribute"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.AttributeUtils.GetAttributes``2">
            <summary>
            Gets the first <typeparamref name="TAttribute"/> attribute set on the <typeparamref name="TTarget"/> type.
            </summary>
            <returns>Falls back to <see cref="M:System.Object.ToString"/> if the attribute is missing.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.AttributeUtils.GetEnumAttributeValue``1(System.Enum,System.Converter{``0,System.String})">
            <summary>
            Gets the first <typeparamref name="TAttribute"/> attribute set on the <paramref name="target"/> enum value.
            Then retrieves a value from the attribute using <paramref name="valueRetriever"/>.
            </summary>
            <returns>Falls back to <see cref="M:System.Object.ToString"/> if the attribute is missing.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.AttributeUtils.ConvertFromString``1(System.String)">
            <summary>
            Uses the type converter for <typeparamref name="TType"/> (set by <see cref="T:System.ComponentModel.TypeConverterAttribute"/>) to parse a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.AttributeUtils.ConvertToString``1(``0)">
            <summary>
            Uses the type converter for <typeparamref name="TType"/> (set by <see cref="T:System.ComponentModel.TypeConverterAttribute"/>) to generate a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.AttributeUtils.GetAttributeValue``2(System.Reflection.Assembly,System.Func{``0,``1})">
            <summary>
            Retrieves a single value from a Custom <see cref="T:System.Attribute"/> associated with an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <typeparam name="TAttribute">The type of Custom <see cref="T:System.Attribute"/> associated with the <paramref name="assembly"/> to retrieve.</typeparam>
            <typeparam name="TValue">The type of the value to retrieve from the <typeparamref name="TAttribute"/>.</typeparam>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve the <typeparamref name="TAttribute"/> from.</param>
            <param name="valueRetrieval">A callback used to retrieve a <typeparamref name="TValue"/> from a <typeparamref name="TAttribute"/>.</param>
            <returns>The retrieved value or <see langword="null"/> if no <typeparamref name="TAttribute"/> was found.</returns>
        </member>
        <member name="T:NanoByte.Common.Values.Design.EnumDescriptionConverter`1">
            <summary>
            Type converter for <see cref="T:System.Enum"/>s annotated with <see cref="T:System.ComponentModel.DescriptionAttribute"/>s.
            </summary>
            <typeparam name="T">The type the converter is used for.</typeparam>
            <example>
              Add this attribute to the <see cref="T:System.Enum"/>:
              <code>[TypeConverter(typeof(DescriptionEnumConverter&lt;NameOfEnum&gt;))]</code>
            </example>
            <remarks><see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> is used as the case-insensitive string representation (falls back to element name).</remarks>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumDescriptionConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumDescriptionConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumDescriptionConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Values.Design.EnumXmlConverter`1">
            <summary>
            Type converter for <see cref="T:System.Enum"/>s annotated with <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/>s.
            </summary>
            <typeparam name="T">The type the converter is used for.</typeparam>
            <example>
              Add this attribute to the <see cref="T:System.Enum"/>:
              <code>[TypeConverter(typeof(XmlEnumConverter&lt;NameOfEnum&gt;))]</code>
            </example>
            <remarks><see cref="P:System.Xml.Serialization.XmlEnumAttribute.Name"/> is used as the case-insensitive string representation (falls back to element name).</remarks>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumXmlConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumXmlConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumXmlConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Values.Design.StringConstructorConverter`1">
            <summary>
            Generic type converter for classes that have a constructor with a single string argument and a coressponding <see cref="M:System.Object.ToString"/> implementation.
            </summary>
            <typeparam name="T">The type the converter is used for.</typeparam>
            <example>
              Add this attribute to the type:
              <code>[TypeConverter(typeof(StringConstructorConverter&lt;NameOfType&gt;))]</code>
            </example>
        </member>
        <member name="M:NanoByte.Common.Values.Design.StringConstructorConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.StringConstructorConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.StringConstructorConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Values.Design.ValueTypeConverter`1">
            <summary>
            Abstract base-class for easily creating a <see cref="T:System.ComponentModel.TypeConverter"/> for a struct (value type).
            </summary>
            <typeparam name="T">The struct to create the <see cref="T:System.ComponentModel.TypeConverter"/> for.</typeparam>
            <remarks>Providing a <see cref="T:System.ComponentModel.TypeConverter"/> for a struct improves the runtime experience with PropertyGrids.</remarks>
            <example>
              Add this attribute to the struct:
              <code>[TypeConverter(typeof(ClassDerivedFromThisOne))]</code>
            </example>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetElementSeparator(System.Globalization.CultureInfo)">
            <summary>The separator to place between individual elements.</summary>
        </member>
        <member name="P:NanoByte.Common.Values.Design.ValueTypeConverter`1.NoArguments">
            <summary>The number of arguments the constructor of <typeparamref name="T"/> has.</summary>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetConstructor">
            <returns>The constructor used to create new instances of <typeparamref name="T"/> (deserialization).</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetArguments(`0)">
            <returns>The arguments for the constructor of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetValues(`0,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
            <returns>The elements of <typeparamref name="T"/> converted to strings.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetObject(System.String[],System.Globalization.CultureInfo)">
            <returns>A new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetObject(System.Collections.IDictionary)">
            <returns>A new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:NanoByte.Common.Values.EnumExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Enum"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            Checks whether a flag is set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.HasFlag(System.UInt16,System.UInt16)">
            <summary>
            Checks whether a flag is set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.HasFlag(System.Int32,System.Int32)">
            <summary>
            Checks whether a flag is set.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Values.KeyEqualityComparer`2">
            <summary>
            Specifies the equality of objects based on the equality of a key extracted from the objects.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <typeparam name="TKey">The type of the key to use to determine equality.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Values.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new key equality comparer.
            </summary>
            <param name="keySelector">A function mapping objects to their respective equality keys.</param>
        </member>
        <member name="T:NanoByte.Common.Values.Languages">
            <summary>
            Provides <see cref="T:System.Globalization.CultureInfo"/>s.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Values.Languages.AllKnown">
            <summary>
            All known languages in alphabetical order.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.Languages.FromString(System.String)">
            <summary>
            Creates a <see cref="T:System.Globalization.CultureInfo"/> from a ISO language code either in Windows (e.g. en-US) or Unix (e.g. en_US) format.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.Languages.SetUI(System.Globalization.CultureInfo)">
            <summary>
            Changes the UI language used by this process. Should be called right after startup.
            </summary>
            <remarks>This sets <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> for the current and all future threads.</remarks>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
    </members>
</doc>
